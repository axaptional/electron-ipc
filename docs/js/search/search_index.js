var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.5","fields":["title","body"],"fieldVectors":[["title/classes/Canceler.html",[0,0.584,1,1.127]],["body/classes/Canceler.html",[0,0.392,1,1.463,2,0.558,3,0.366,4,0.366,5,0.295,6,0.558,7,0.613,8,0.926,9,1.176,10,2.56,11,3.299,12,2.877,13,2.114,14,0.392,15,0.756,16,1.826,17,0.936,18,2.273,19,0.701,20,0.919,21,1.595,22,1.798,23,2.795,24,1.517,25,0.919,26,1.517,27,1.595,28,0.701,29,0.085,30,0.558,31,0.592,32,0.701,33,1.413,34,1.272,35,1.732,36,1.176,37,0.919,38,0.919,39,1.978,40,1.176,41,1.176,42,1.776,43,2.367,44,2.29,45,0.756,46,2.273,47,1.143,48,1.517,49,1.176,50,0.701,51,1.002,52,0.638,53,1.534,54,0.558,55,1.851,56,0.792,57,2.04,58,0.701,59,1.517,60,0.701,61,0.701,62,0.701,63,2.877,64,0.701,65,1.776,66,1.536,67,0.701,68,0.133,69,1.272,70,0.366,71,1.776,72,0.701,73,1.176,74,1.517,75,0.701,76,0.451,77,1.776,78,0.701,79,0.701,80,1.208,81,1.574,82,0.701,83,1.517,84,0.936,85,1.798,86,0.613,87,0.451,88,0.451,89,1.776,90,0.701,91,0.701,92,0.701,93,1.595,94,1.776,95,0.976,96,2.224,97,0.701,98,0.701,99,1.595,100,0.451,101,2.14,102,1.767,103,1.895,104,0.701,105,0.701,106,1.208,107,0.701,108,2.273,109,0.701,110,1.176,111,0.701,112,0.701,113,0.701,114,1.574,115,1.176,116,0.701,117,1.776,118,0.701,119,0.701,120,2.474,121,1.978,122,1.176,123,1.176,124,2.273,125,1.176,126,0.701,127,0.701,128,2.273,129,1.776,130,0.976,131,1.517,132,2.14,133,1.517,134,2.273,135,1.413,136,1.978,137,0.701,138,1.776,139,1.776,140,0.701,141,1.176,142,1.176,143,1.978,144,1.176,145,1.176,146,1.176,147,1.176,148,1.176,149,1.176,150,1.176,151,1.176,152,0.701,153,0.976,154,1.776,155,0.936,156,1.517,157,1.517,158,1.978,159,1.517,160,0.701,161,0.701,162,1.176,163,2.14,164,1.176,165,1.176,166,1.176,167,1.176,168,0.936,169,0.936,170,0.558,171,1.703,172,1.517,173,0.701,174,0.701,175,1.176,176,0.701,177,1.978,178,1.176,179,0.701,180,0.701,181,0.613,182,1.176,183,0.701,184,1.517,185,0.701,186,1.176,187,0.701,188,0.701,189,0.701,190,1.517,191,1.517,192,1.176,193,1.517,194,0.701,195,0.701,196,1.176,197,0.558,198,0.701,199,0.451,200,0.701,201,0.701,202,0.701,203,0.701,204,1.176,205,1.208,206,1.176,207,0.701,208,0.701,209,0.701,210,0.701,211,0.017,212,0.028,213,0.017]],["title/classes/Channels.html",[0,0.584,51,0.736]],["body/classes/Channels.html",[0,0.54,2,1.287,3,0.844,4,0.844,5,0.68,7,1.444,8,1.167,13,2.197,14,0.54,16,1.781,17,1.781,22,2.183,24,2.768,28,2.768,29,0.084,30,2.616,31,0.923,32,2.768,34,1.44,45,2.115,51,1.164,52,1.078,56,1.167,57,1.781,66,1.444,68,0.308,70,1.167,76,1.44,85,2.02,93,1.44,95,1.781,102,1.44,103,1.041,130,1.651,153,1.651,181,1.167,199,2.115,211,0.038,212,0.053,213,0.038,214,1.287,215,2.237,216,2.237,217,2.931,218,2.931,219,2.931,220,2.931,221,2.237,222,2.119,223,2.237,224,3.331,225,3.005,226,2.237,227,2.119,228,2.565,229,2.237,230,2.119,231,2.042,232,2.237,233,2.119,234,2.237,235,1.618,236,1.618,237,1.618]],["title/interfaces/CommunicationChannels.html",[52,0.736,68,0.333]],["body/interfaces/CommunicationChannels.html",[0,0.627,3,0.981,4,0.981,5,0.79,7,0.981,8,1.292,13,2.178,14,0.627,15,1.594,16,1.894,22,2.166,29,0.084,30,2.343,31,0.826,34,1.21,45,1.894,51,1.164,52,1.164,56,1.292,57,1.894,66,1.536,68,0.358,70,0.981,76,1.21,85,1.894,93,1.968,95,1.782,102,1.968,103,1.21,130,1.782,153,1.894,181,1.292,199,1.894,211,0.045,212,0.059,213,0.045,214,1.496,215,1.88,216,1.88,221,1.88,223,2.476,224,3.25,225,2.769,226,1.88,228,2.943,229,1.88,231,2.204,232,1.88,234,1.88,235,1.88,236,1.88,237,1.88,238,1.21]],["title/interfaces/IpcRendererEvent.html",[68,0.333,239,1.127]],["body/interfaces/IpcRendererEvent.html",[3,1.173,4,1.173,5,0.945,7,1.173,8,1.449,14,0.75,15,1.786,21,1.447,29,0.083,31,1.049,44,2.21,47,1.786,53,1.447,56,1.641,68,0.428,86,1.641,87,1.786,88,2.024,99,1.786,100,1.786,114,2.21,211,0.053,212,0.066,213,0.053,238,1.447,239,1.938,240,1.79,241,4.12,242,3.945,243,3.636,244,3.636,245,2.776,246,3.636,247,2.776,248,2.946,249,2.946,250,2.776,251,2.249]],["title/interfaces/ListenerOptions.html",[68,0.333,69,1.127]],["body/interfaces/ListenerOptions.html",[0,0.402,1,1.294,3,0.377,4,0.377,5,0.304,6,0.575,7,0.377,8,0.944,9,0.723,10,2.172,11,3.303,12,2.77,13,2.081,14,0.402,15,0.775,16,1.709,18,1.809,21,1.398,22,1.709,23,2.717,26,1.205,27,1.553,29,0.085,31,0.517,33,1.234,34,1.164,35,1.709,36,0.723,39,1.809,40,0.723,41,0.723,42,1.809,43,2.36,44,2.277,45,0.465,46,2.172,47,1.164,48,1.55,49,1.205,50,0.723,51,1.015,52,0.652,53,1.553,54,0.575,55,1.865,56,0.809,57,2.05,58,0.723,59,1.55,60,0.723,61,0.723,62,1.205,63,2.933,64,1.205,65,2.304,66,1.562,67,1.205,68,0.137,69,1.398,70,0.629,71,2.414,72,1.205,73,1.55,74,1.809,75,1.205,76,0.997,77,1.809,78,0.723,79,0.723,80,1.234,81,1.6,82,0.723,83,1.55,84,0.959,85,1.813,86,0.629,87,0.465,88,0.465,89,1.809,90,0.723,91,0.723,92,0.723,93,1.613,94,1.809,95,0.997,96,2.243,97,0.723,98,0.723,99,1.613,100,0.465,101,2.172,102,1.783,103,1.908,104,0.723,105,0.723,106,1.234,107,0.723,108,2.304,109,0.723,110,1.205,111,0.723,112,0.723,113,0.723,114,1.6,115,1.205,116,0.723,117,1.809,118,0.723,119,0.723,120,2.487,121,2.011,122,1.205,123,1.205,124,2.304,125,1.205,126,0.723,127,0.723,128,2.304,129,1.809,130,0.997,131,1.55,132,2.172,133,1.55,134,2.304,135,1.44,136,2.011,137,0.723,138,1.809,139,1.809,140,0.723,141,1.205,142,1.205,143,2.011,144,1.205,145,1.205,146,1.205,147,1.205,148,1.205,149,1.205,150,1.205,151,1.205,152,0.723,153,0.997,154,1.809,155,0.959,156,1.55,157,1.55,158,2.011,159,1.55,160,0.723,161,0.723,162,1.205,163,2.172,164,1.205,165,1.205,166,1.205,167,1.205,168,0.959,169,0.959,170,0.575,171,1.729,172,1.55,173,0.723,174,0.723,175,1.205,176,0.723,177,2.011,178,1.205,179,0.723,180,0.723,181,0.629,182,1.205,183,0.723,184,1.55,185,0.723,186,1.205,187,0.723,188,0.723,189,0.723,190,1.55,191,1.55,192,1.205,193,1.55,194,0.723,195,0.723,196,1.205,197,0.575,198,0.723,199,0.465,200,0.723,201,0.723,202,0.723,203,0.723,204,1.205,205,1.234,206,1.205,207,0.723,208,0.723,209,0.723,210,0.723,211,0.017,212,0.029,213,0.017,238,0.465]],["title/coverage.html",[252,2.362]],["body/coverage.html",[0,1.096,1,1.534,5,1.002,6,2.459,27,1.534,29,0.082,31,0.795,51,1.002,52,1.002,68,0.588,69,1.534,84,1.897,211,0.057,212,0.068,213,0.057,214,2.29,239,1.534,240,1.897,252,2.384,253,2.384,254,3.123,255,3.123,256,4.46,257,3.123,258,3.123,259,3.768,260,3.123,261,3.123,262,3.123,263,2.384,264,3.768,265,3.123,266,2.384,267,3.123,268,3.123]],["title/dependencies.html",[269,1.476,270,2.098]],["body/dependencies.html",[29,0.081,55,1.721,86,1.395,211,0.064,212,0.073,213,0.064,270,2.674,271,3.503,272,3.503,273,3.503,274,3.503]],["title/index.html",[14,0.492,275,1.476,276,1.476]],["body/index.html",[17,1.571,19,1.973,27,1.645,29,0.082,33,2.472,35,1.824,43,1.571,47,1.645,55,1.999,66,1.03,80,1.571,81,1.571,86,1.334,96,1.571,100,1.824,106,2.034,120,2.034,135,1.571,155,2.034,168,1.571,169,2.034,170,1.571,171,2.387,181,1.334,205,1.571,211,0.047,212,0.061,213,0.047,231,1.571,245,1.973,247,1.973,263,2.835,266,2.556,269,2.835,277,2.585,278,2.585,279,2.585,280,2.585,281,2.585,282,2.585,283,2.585,284,2.585,285,2.585,286,2.585,287,2.585,288,2.585,289,2.585,290,2.585,291,2.585,292,2.585,293,2.585,294,2.585,295,3.348,296,3.714,297,1.973,298,2.585,299,2.585,300,2.585,301,2.585,302,1.973,303,2.585,304,2.585,305,2.585,306,2.585,307,3.348,308,3.348,309,3.348,310,2.585,311,2.585,312,2.585,313,2.585,314,2.585,315,2.585,316,2.585,317,2.585,318,3.348,319,3.348,320,3.348,321,3.714,322,3.348,323,2.585,324,2.585,325,2.585,326,2.585,327,2.585,328,2.585,329,2.585,330,2.585,331,2.585,332,2.585,333,3.348,334,3.348,335,2.585,336,2.585]],["title/license.html",[275,1.476,276,1.476,337,1.476]],["body/license.html",[29,0.065,35,1.76,70,1.146,99,1.413,197,1.748,211,0.052,212,0.065,213,0.052,253,2.196,297,2.736,302,2.196,337,2.196,338,2.877,339,3.903,340,2.877,341,2.877,342,2.877,343,2.877,344,2.877,345,3.583,346,2.877,347,2.877,348,2.877,349,2.877,350,2.877,351,2.877,352,3.583,353,4.43,354,2.877,355,2.877,356,2.877,357,3.903,358,2.877,359,2.877,360,2.877,361,2.877,362,2.877,363,2.877,364,2.877,365,2.877,366,2.877,367,2.877,368,3.583,369,2.877,370,2.877,371,2.877,372,2.877,373,2.877,374,3.583,375,3.583,376,2.877,377,2.877,378,2.877,379,2.877,380,2.877,381,2.877,382,2.877,383,2.877,384,2.877,385,2.877,386,2.877,387,2.877,388,2.877,389,2.877,390,2.877,391,2.877,392,2.877,393,2.877,394,2.877,395,2.877,396,2.877,397,2.877,398,2.877,399,2.877,400,2.877,401,2.877,402,2.877,403,2.877,404,2.877]],["title/modules.html",[405,2.362]],["body/modules.html",[29,0.074,211,0.065,212,0.074,213,0.065,405,2.738]],["title/overview.html",[406,2.362]],["body/overview.html",[2,2.156,29,0.074,211,0.064,212,0.074,213,0.064,238,1.743,406,2.709,407,3.549,408,3.549]],["title/miscellaneous/typealiases.html",[409,1.476,410,2.748]],["body/miscellaneous/typealiases.html",[14,0.868,21,1.949,29,0.079,31,0.868,53,1.949,54,2.07,87,1.673,88,1.673,211,0.062,212,0.072,213,0.062,239,1.673,240,2.07,250,3.205,251,2.6,409,2.6,411,4.198]]],"invertedIndex":[["",{"_index":29,"title":{},"body":{"classes/Canceler.html":{},"classes/Channels.html":{},"interfaces/CommunicationChannels.html":{},"interfaces/IpcRendererEvent.html":{},"interfaces/ListenerOptions.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{}}}],["0",{"_index":192,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["1",{"_index":194,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["1.3.0",{"_index":273,"title":{},"body":{"dependencies.html":{}}}],["1.6.10",{"_index":272,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":256,"title":{},"body":{"coverage.html":{}}}],["17/17",{"_index":257,"title":{},"body":{"coverage.html":{}}}],["19/19",{"_index":264,"title":{},"body":{"coverage.html":{}}}],["2",{"_index":196,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["2/2",{"_index":259,"title":{},"body":{"coverage.html":{}}}],["2019",{"_index":341,"title":{},"body":{"license.html":{}}}],["3",{"_index":408,"title":{},"body":{"overview.html":{}}}],["3/3",{"_index":261,"title":{},"body":{"coverage.html":{}}}],["4.0.4",{"_index":274,"title":{},"body":{"dependencies.html":{}}}],["4/4",{"_index":258,"title":{},"body":{"coverage.html":{}}}],["5",{"_index":407,"title":{},"body":{"overview.html":{}}}],["5/5",{"_index":260,"title":{},"body":{"coverage.html":{}}}],["above",{"_index":197,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{},"license.html":{}}}],["abstract",{"_index":83,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["action",{"_index":397,"title":{},"body":{"license.html":{}}}],["add",{"_index":323,"title":{},"body":{"index.html":{}}}],["additional",{"_index":167,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["agent",{"_index":84,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{},"coverage.html":{}}}],["aliases",{"_index":54,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{},"miscellaneous/typealiases.html":{}}}],["already",{"_index":299,"title":{},"body":{"index.html":{}}}],["always",{"_index":286,"title":{},"body":{"index.html":{}}}],["and/or",{"_index":366,"title":{},"body":{"license.html":{}}}],["andr",{"_index":343,"title":{},"body":{"license.html":{}}}],["api",{"_index":282,"title":{},"body":{"index.html":{}}}],["appreciated",{"_index":291,"title":{},"body":{"index.html":{}}}],["args",{"_index":124,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["argument",{"_index":189,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["arguments",{"_index":65,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["arising",{"_index":401,"title":{},"body":{"license.html":{}}}],["around",{"_index":279,"title":{},"body":{"index.html":{}}}],["array",{"_index":73,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["arrays",{"_index":190,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["associated",{"_index":354,"title":{},"body":{"license.html":{}}}],["asynchronous",{"_index":304,"title":{},"body":{"index.html":{}}}],["authors",{"_index":391,"title":{},"body":{"license.html":{}}}],["automatically",{"_index":315,"title":{},"body":{"index.html":{}}}],["axaptional/electron",{"_index":321,"title":{},"body":{"index.html":{}}}],["belongs",{"_index":234,"title":{},"body":{"classes/Channels.html":{},"interfaces/CommunicationChannels.html":{}}}],["bluebird",{"_index":169,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{},"index.html":{}}}],["boolean",{"_index":76,"title":{},"body":{"classes/Canceler.html":{},"classes/Channels.html":{},"interfaces/CommunicationChannels.html":{},"interfaces/ListenerOptions.html":{}}}],["c",{"_index":340,"title":{},"body":{"license.html":{}}}],["call",{"_index":134,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["called",{"_index":42,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["calls",{"_index":129,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["cancel",{"_index":18,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["cancelable",{"_index":307,"title":{},"body":{"index.html":{}}}],["canceler",{"_index":1,"title":{"classes/Canceler.html":{}},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{},"coverage.html":{}}}],["canceler(this.ipcservice",{"_index":151,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["canceling",{"_index":165,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["channel",{"_index":13,"title":{},"body":{"classes/Canceler.html":{},"classes/Channels.html":{},"interfaces/CommunicationChannels.html":{},"interfaces/ListenerOptions.html":{}}}],["channel.endswith",{"_index":235,"title":{},"body":{"classes/Channels.html":{},"interfaces/CommunicationChannels.html":{}}}],["channels",{"_index":51,"title":{"classes/Channels.html":{}},"body":{"classes/Canceler.html":{},"classes/Channels.html":{},"interfaces/CommunicationChannels.html":{},"interfaces/ListenerOptions.html":{},"coverage.html":{}}}],["channels.getcommunicationchannels(channel",{"_index":121,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["channels.push(...this.ipcservice.eventnames().filter(channels.isrequestchannel",{"_index":209,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["channels.push(channels.getrequestchannel(channel",{"_index":208,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["charge",{"_index":349,"title":{},"body":{"license.html":{}}}],["claim",{"_index":394,"title":{},"body":{"license.html":{}}}],["class",{"_index":0,"title":{"classes/Canceler.html":{},"classes/Channels.html":{}},"body":{"classes/Canceler.html":{},"classes/Channels.html":{},"interfaces/CommunicationChannels.html":{},"interfaces/ListenerOptions.html":{},"coverage.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/Canceler.html":{},"classes/Channels.html":{},"overview.html":{}}}],["client",{"_index":263,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["client.post('message",{"_index":329,"title":{},"body":{"index.html":{}}}],["comchannels",{"_index":177,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["communication",{"_index":181,"title":{},"body":{"classes/Canceler.html":{},"classes/Channels.html":{},"interfaces/CommunicationChannels.html":{},"interfaces/ListenerOptions.html":{},"index.html":{}}}],["communicationchannels",{"_index":52,"title":{"interfaces/CommunicationChannels.html":{}},"body":{"classes/Canceler.html":{},"classes/Channels.html":{},"interfaces/CommunicationChannels.html":{},"interfaces/ListenerOptions.html":{},"coverage.html":{}}}],["communicator",{"_index":79,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["conditions",{"_index":373,"title":{},"body":{"license.html":{}}}],["connection",{"_index":403,"title":{},"body":{"license.html":{}}}],["console.log(response",{"_index":331,"title":{},"body":{"index.html":{}}}],["const",{"_index":120,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{},"index.html":{}}}],["constructive",{"_index":287,"title":{},"body":{"index.html":{}}}],["constructor",{"_index":19,"title":{},"body":{"classes/Canceler.html":{},"index.html":{}}}],["constructor(ipcservice",{"_index":20,"title":{},"body":{"classes/Canceler.html":{}}}],["constructor(private",{"_index":58,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["constructor(protected",{"_index":90,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["contract",{"_index":398,"title":{},"body":{"license.html":{}}}],["copies",{"_index":368,"title":{},"body":{"license.html":{}}}],["copy",{"_index":352,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":339,"title":{},"body":{"license.html":{}}}],["counterparts",{"_index":325,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":252,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["currently",{"_index":156,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["custom",{"_index":305,"title":{},"body":{"index.html":{}}}],["damages",{"_index":395,"title":{},"body":{"license.html":{}}}],["data",{"_index":96,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{},"index.html":{}}}],["deal",{"_index":356,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":404,"title":{},"body":{"license.html":{}}}],["default",{"_index":75,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["defined",{"_index":24,"title":{},"body":{"classes/Canceler.html":{},"classes/Channels.html":{}}}],["dependencies",{"_index":270,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["dependency",{"_index":317,"title":{},"body":{"index.html":{}}}],["description",{"_index":7,"title":{},"body":{"classes/Canceler.html":{},"classes/Channels.html":{},"interfaces/CommunicationChannels.html":{},"interfaces/IpcRendererEvent.html":{},"interfaces/ListenerOptions.html":{}}}],["distribute",{"_index":364,"title":{},"body":{"license.html":{}}}],["documentation",{"_index":253,"title":{},"body":{"coverage.html":{},"license.html":{}}}],["e.g",{"_index":326,"title":{},"body":{"index.html":{}}}],["each",{"_index":137,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["easy",{"_index":277,"title":{},"body":{"index.html":{}}}],["electron",{"_index":86,"title":{},"body":{"classes/Canceler.html":{},"interfaces/IpcRendererEvent.html":{},"interfaces/ListenerOptions.html":{},"dependencies.html":{},"index.html":{}}}],["electron's",{"_index":280,"title":{},"body":{"index.html":{}}}],["electron.event",{"_index":251,"title":{},"body":{"interfaces/IpcRendererEvent.html":{},"miscellaneous/typealiases.html":{}}}],["electron.ipcmain",{"_index":248,"title":{},"body":{"interfaces/IpcRendererEvent.html":{}}}],["electron.ipcrenderer",{"_index":249,"title":{},"body":{"interfaces/IpcRendererEvent.html":{}}}],["emits",{"_index":152,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["endpoint",{"_index":115,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["error",{"_index":112,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["event",{"_index":99,"title":{},"body":{"classes/Canceler.html":{},"interfaces/IpcRendererEvent.html":{},"interfaces/ListenerOptions.html":{},"license.html":{}}}],["export",{"_index":56,"title":{},"body":{"classes/Canceler.html":{},"classes/Channels.html":{},"interfaces/CommunicationChannels.html":{},"interfaces/IpcRendererEvent.html":{},"interfaces/ListenerOptions.html":{}}}],["express",{"_index":382,"title":{},"body":{"license.html":{}}}],["extensions",{"_index":306,"title":{},"body":{"index.html":{}}}],["false",{"_index":74,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["feature",{"_index":311,"title":{},"body":{"index.html":{}}}],["features",{"_index":296,"title":{},"body":{"index.html":{}}}],["feedback",{"_index":288,"title":{},"body":{"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/Canceler.html":{},"classes/Channels.html":{},"interfaces/CommunicationChannels.html":{},"interfaces/IpcRendererEvent.html":{},"interfaces/ListenerOptions.html":{},"coverage.html":{}}}],["files",{"_index":355,"title":{},"body":{"license.html":{}}}],["fit",{"_index":187,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["fitness",{"_index":387,"title":{},"body":{"license.html":{}}}],["following",{"_index":302,"title":{},"body":{"index.html":{},"license.html":{}}}],["free",{"_index":348,"title":{},"body":{"license.html":{}}}],["function",{"_index":12,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["furnished",{"_index":371,"title":{},"body":{"license.html":{}}}],["generating",{"_index":215,"title":{},"body":{"classes/Channels.html":{},"interfaces/CommunicationChannels.html":{}}}],["getcommunicationchannels",{"_index":217,"title":{},"body":{"classes/Channels.html":{}}}],["getcommunicationchannels(origin",{"_index":221,"title":{},"body":{"classes/Channels.html":{},"interfaces/CommunicationChannels.html":{}}}],["getrequestchannel",{"_index":218,"title":{},"body":{"classes/Channels.html":{}}}],["getrequestchannel(origin",{"_index":226,"title":{},"body":{"classes/Channels.html":{},"interfaces/CommunicationChannels.html":{}}}],["getresponsechannel",{"_index":219,"title":{},"body":{"classes/Channels.html":{}}}],["getresponsechannel(origin",{"_index":229,"title":{},"body":{"classes/Channels.html":{},"interfaces/CommunicationChannels.html":{}}}],["getting",{"_index":275,"title":{"index.html":{},"license.html":{}},"body":{}}],["given",{"_index":85,"title":{},"body":{"classes/Canceler.html":{},"classes/Channels.html":{},"interfaces/CommunicationChannels.html":{},"interfaces/ListenerOptions.html":{}}}],["granted",{"_index":347,"title":{},"body":{"license.html":{}}}],["handler",{"_index":23,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["handling",{"_index":64,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["helper",{"_index":9,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["here's",{"_index":333,"title":{},"body":{"index.html":{}}}],["hereby",{"_index":346,"title":{},"body":{"license.html":{}}}],["holders",{"_index":392,"title":{},"body":{"license.html":{}}}],["id",{"_index":244,"title":{},"body":{"interfaces/IpcRendererEvent.html":{}}}],["identifier",{"_index":254,"title":{},"body":{"coverage.html":{}}}],["ignored",{"_index":176,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["implied",{"_index":383,"title":{},"body":{"license.html":{}}}],["import",{"_index":47,"title":{},"body":{"classes/Canceler.html":{},"interfaces/IpcRendererEvent.html":{},"interfaces/ListenerOptions.html":{},"index.html":{}}}],["included",{"_index":376,"title":{},"body":{"license.html":{}}}],["including",{"_index":297,"title":{},"body":{"index.html":{},"license.html":{}}}],["index",{"_index":14,"title":{"index.html":{}},"body":{"classes/Canceler.html":{},"classes/Channels.html":{},"interfaces/CommunicationChannels.html":{},"interfaces/IpcRendererEvent.html":{},"interfaces/ListenerOptions.html":{},"miscellaneous/typealiases.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/Canceler.html":{},"classes/Channels.html":{},"interfaces/CommunicationChannels.html":{},"interfaces/IpcRendererEvent.html":{},"interfaces/ListenerOptions.html":{}}}],["information",{"_index":319,"title":{},"body":{"index.html":{}}}],["initializes",{"_index":26,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["input",{"_index":198,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["install",{"_index":309,"title":{},"body":{"index.html":{}}}],["installation",{"_index":327,"title":{},"body":{"index.html":{}}}],["installed",{"_index":316,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":147,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["instead",{"_index":158,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["inter",{"_index":281,"title":{},"body":{"index.html":{}}}],["interface",{"_index":68,"title":{"interfaces/CommunicationChannels.html":{},"interfaces/IpcRendererEvent.html":{},"interfaces/ListenerOptions.html":{}},"body":{"classes/Canceler.html":{},"classes/Channels.html":{},"interfaces/CommunicationChannels.html":{},"interfaces/IpcRendererEvent.html":{},"interfaces/ListenerOptions.html":{},"coverage.html":{}}}],["interfaces",{"_index":238,"title":{},"body":{"interfaces/CommunicationChannels.html":{},"interfaces/IpcRendererEvent.html":{},"interfaces/ListenerOptions.html":{},"overview.html":{}}}],["ipc",{"_index":33,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{},"index.html":{}}}],["ipcevent",{"_index":53,"title":{},"body":{"classes/Canceler.html":{},"interfaces/IpcRendererEvent.html":{},"interfaces/ListenerOptions.html":{},"miscellaneous/typealiases.html":{}}}],["ipcmain",{"_index":87,"title":{},"body":{"classes/Canceler.html":{},"interfaces/IpcRendererEvent.html":{},"interfaces/ListenerOptions.html":{},"miscellaneous/typealiases.html":{}}}],["ipcmainevent",{"_index":250,"title":{},"body":{"interfaces/IpcRendererEvent.html":{},"miscellaneous/typealiases.html":{}}}],["ipcrenderer",{"_index":88,"title":{},"body":{"classes/Canceler.html":{},"interfaces/IpcRendererEvent.html":{},"interfaces/ListenerOptions.html":{},"miscellaneous/typealiases.html":{}}}],["ipcrendererevent",{"_index":239,"title":{"interfaces/IpcRendererEvent.html":{}},"body":{"interfaces/IpcRendererEvent.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["ipcservice",{"_index":21,"title":{},"body":{"classes/Canceler.html":{},"interfaces/IpcRendererEvent.html":{},"interfaces/ListenerOptions.html":{},"miscellaneous/typealiases.html":{}}}],["isrequestchannel",{"_index":220,"title":{},"body":{"classes/Channels.html":{}}}],["isrequestchannel(channel",{"_index":232,"title":{},"body":{"classes/Channels.html":{},"interfaces/CommunicationChannels.html":{}}}],["issue",{"_index":289,"title":{},"body":{"index.html":{}}}],["kind",{"_index":381,"title":{},"body":{"license.html":{}}}],["length",{"_index":191,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["liability",{"_index":396,"title":{},"body":{"license.html":{}}}],["liable",{"_index":393,"title":{},"body":{"license.html":{}}}],["library",{"_index":168,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{},"index.html":{}}}],["license",{"_index":337,"title":{"license.html":{}},"body":{"license.html":{}}}],["limitation",{"_index":359,"title":{},"body":{"license.html":{}}}],["limited",{"_index":384,"title":{},"body":{"license.html":{}}}],["list",{"_index":300,"title":{},"body":{"index.html":{}}}],["listen",{"_index":136,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["listener",{"_index":11,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["listener(...args",{"_index":145,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["listener(args",{"_index":146,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["listeneroptions",{"_index":69,"title":{"interfaces/ListenerOptions.html":{}},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{},"coverage.html":{}}}],["listeners",{"_index":205,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{},"index.html":{}}}],["listening",{"_index":114,"title":{},"body":{"classes/Canceler.html":{},"interfaces/IpcRendererEvent.html":{},"interfaces/ListenerOptions.html":{}}}],["listens",{"_index":128,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["longer",{"_index":41,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["main",{"_index":247,"title":{},"body":{"interfaces/IpcRendererEvent.html":{},"index.html":{}}}],["matching",{"_index":212,"title":{},"body":{"classes/Canceler.html":{},"classes/Channels.html":{},"interfaces/CommunicationChannels.html":{},"interfaces/IpcRendererEvent.html":{},"interfaces/ListenerOptions.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{}}}],["mategka",{"_index":344,"title":{},"body":{"license.html":{}}}],["math.min(args.length",{"_index":201,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["meaning",{"_index":40,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["means",{"_index":303,"title":{},"body":{"index.html":{}}}],["mention",{"_index":105,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["merchantability",{"_index":386,"title":{},"body":{"license.html":{}}}],["merge",{"_index":362,"title":{},"body":{"license.html":{}}}],["message",{"_index":43,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{},"index.html":{}}}],["message\").then(response",{"_index":330,"title":{},"body":{"index.html":{}}}],["messages",{"_index":81,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{},"index.html":{}}}],["method",{"_index":135,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{},"index.html":{}}}],["methods",{"_index":17,"title":{},"body":{"classes/Canceler.html":{},"classes/Channels.html":{},"index.html":{}}}],["miscellaneous",{"_index":409,"title":{"miscellaneous/typealiases.html":{}},"body":{"miscellaneous/typealiases.html":{}}}],["missing",{"_index":295,"title":{},"body":{"index.html":{}}}],["mit",{"_index":338,"title":{},"body":{"license.html":{}}}],["modify",{"_index":361,"title":{},"body":{"license.html":{}}}],["modules",{"_index":405,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["more",{"_index":318,"title":{},"body":{"index.html":{}}}],["name",{"_index":30,"title":{},"body":{"classes/Canceler.html":{},"classes/Channels.html":{},"interfaces/CommunicationChannels.html":{}}}],["names",{"_index":216,"title":{},"body":{"classes/Channels.html":{},"interfaces/CommunicationChannels.html":{}}}],["native",{"_index":170,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{},"index.html":{}}}],["natively",{"_index":174,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["need",{"_index":159,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["new",{"_index":27,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{},"coverage.html":{},"index.html":{}}}],["noninfringement",{"_index":390,"title":{},"body":{"license.html":{}}}],["nothing",{"_index":175,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["notice",{"_index":374,"title":{},"body":{"license.html":{}}}],["number",{"_index":242,"title":{},"body":{"interfaces/IpcRendererEvent.html":{}}}],["object",{"_index":195,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["object.assign",{"_index":142,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["observable",{"_index":48,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["observable((subscriber",{"_index":161,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["observable(subscriber",{"_index":202,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["observables",{"_index":155,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{},"index.html":{}}}],["obtaining",{"_index":351,"title":{},"body":{"license.html":{}}}],["occurred",{"_index":113,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["omit",{"_index":207,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["on$(channel",{"_index":160,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["on(channel",{"_index":140,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["once",{"_index":108,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["once(channel",{"_index":172,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["oncelistener(comchannels",{"_index":185,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["oncepromise(comchannels",{"_index":183,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["optional",{"_index":32,"title":{},"body":{"classes/Canceler.html":{},"classes/Channels.html":{}}}],["options",{"_index":63,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["origin",{"_index":224,"title":{},"body":{"classes/Channels.html":{},"interfaces/CommunicationChannels.html":{}}}],["origin/electron",{"_index":225,"title":{},"body":{"classes/Channels.html":{},"interfaces/CommunicationChannels.html":{}}}],["otherwise",{"_index":400,"title":{},"body":{"license.html":{}}}],["out",{"_index":402,"title":{},"body":{"license.html":{}}}],["overloads",{"_index":298,"title":{},"body":{"index.html":{}}}],["overview",{"_index":406,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":269,"title":{"dependencies.html":{}},"body":{"index.html":{}}}],["pair",{"_index":223,"title":{},"body":{"classes/Channels.html":{},"interfaces/CommunicationChannels.html":{}}}],["param",{"_index":57,"title":{},"body":{"classes/Canceler.html":{},"classes/Channels.html":{},"interfaces/CommunicationChannels.html":{},"interfaces/ListenerOptions.html":{}}}],["parameters",{"_index":28,"title":{},"body":{"classes/Canceler.html":{},"classes/Channels.html":{}}}],["params",{"_index":141,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["params.spread",{"_index":144,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["particular",{"_index":388,"title":{},"body":{"license.html":{}}}],["permission",{"_index":345,"title":{},"body":{"license.html":{}}}],["permit",{"_index":369,"title":{},"body":{"license.html":{}}}],["person",{"_index":350,"title":{},"body":{"license.html":{}}}],["persons",{"_index":370,"title":{},"body":{"license.html":{}}}],["please",{"_index":292,"title":{},"body":{"index.html":{}}}],["portions",{"_index":378,"title":{},"body":{"license.html":{}}}],["possible",{"_index":166,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["post",{"_index":106,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{},"index.html":{}}}],["post(channel",{"_index":119,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["posted",{"_index":82,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["postfix",{"_index":324,"title":{},"body":{"index.html":{}}}],["posts",{"_index":116,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["present",{"_index":342,"title":{},"body":{"license.html":{}}}],["prints",{"_index":332,"title":{},"body":{"index.html":{}}}],["private",{"_index":59,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["process",{"_index":100,"title":{},"body":{"classes/Canceler.html":{},"interfaces/IpcRendererEvent.html":{},"interfaces/ListenerOptions.html":{},"index.html":{}}}],["progress",{"_index":285,"title":{},"body":{"index.html":{}}}],["promise",{"_index":55,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{},"dependencies.html":{},"index.html":{}}}],["promise((resolve",{"_index":122,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["promise/register/bluebird')any",{"_index":314,"title":{},"body":{"index.html":{}}}],["promises",{"_index":171,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{},"index.html":{}}}],["properties",{"_index":15,"title":{},"body":{"classes/Canceler.html":{},"interfaces/CommunicationChannels.html":{},"interfaces/IpcRendererEvent.html":{},"interfaces/ListenerOptions.html":{}}}],["protected",{"_index":89,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["provided",{"_index":379,"title":{},"body":{"license.html":{}}}],["public",{"_index":16,"title":{},"body":{"classes/Canceler.html":{},"classes/Channels.html":{},"interfaces/CommunicationChannels.html":{},"interfaces/ListenerOptions.html":{}}}],["publish",{"_index":363,"title":{},"body":{"license.html":{}}}],["purpose",{"_index":389,"title":{},"body":{"license.html":{}}}],["receive",{"_index":231,"title":{},"body":{"classes/Channels.html":{},"interfaces/CommunicationChannels.html":{},"index.html":{}}}],["received",{"_index":44,"title":{},"body":{"classes/Canceler.html":{},"interfaces/IpcRendererEvent.html":{},"interfaces/ListenerOptions.html":{}}}],["receiving",{"_index":182,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["refrain",{"_index":293,"title":{},"body":{"index.html":{}}}],["register",{"_index":312,"title":{},"body":{"index.html":{}}}],["reject",{"_index":123,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["rejected",{"_index":110,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["removealllisteners",{"_index":204,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["removealllisteners(channel",{"_index":206,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["renderer",{"_index":245,"title":{},"body":{"interfaces/IpcRendererEvent.html":{},"index.html":{}}}],["replies",{"_index":78,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["reply",{"_index":334,"title":{},"body":{"index.html":{}}}],["reporting",{"_index":294,"title":{},"body":{"index.html":{}}}],["reports",{"_index":290,"title":{},"body":{"index.html":{}}}],["represents",{"_index":8,"title":{},"body":{"classes/Canceler.html":{},"classes/Channels.html":{},"interfaces/CommunicationChannels.html":{},"interfaces/IpcRendererEvent.html":{},"interfaces/ListenerOptions.html":{}}}],["request",{"_index":95,"title":{},"body":{"classes/Canceler.html":{},"classes/Channels.html":{},"interfaces/CommunicationChannels.html":{},"interfaces/ListenerOptions.html":{}}}],["requestchannel",{"_index":93,"title":{},"body":{"classes/Canceler.html":{},"classes/Channels.html":{},"interfaces/CommunicationChannels.html":{},"interfaces/ListenerOptions.html":{}}}],["requests",{"_index":228,"title":{},"body":{"classes/Channels.html":{},"interfaces/CommunicationChannels.html":{}}}],["require('any",{"_index":313,"title":{},"body":{"index.html":{}}}],["resolve(args",{"_index":125,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["resolves",{"_index":117,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["respond",{"_index":101,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["respond(event",{"_index":104,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["respond(response",{"_index":149,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["responds",{"_index":98,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["response",{"_index":103,"title":{},"body":{"classes/Canceler.html":{},"classes/Channels.html":{},"interfaces/CommunicationChannels.html":{},"interfaces/ListenerOptions.html":{}}}],["response.then(respond",{"_index":148,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["responsechannel",{"_index":102,"title":{},"body":{"classes/Canceler.html":{},"classes/Channels.html":{},"interfaces/CommunicationChannels.html":{},"interfaces/ListenerOptions.html":{}}}],["responses",{"_index":153,"title":{},"body":{"classes/Canceler.html":{},"classes/Channels.html":{},"interfaces/CommunicationChannels.html":{},"interfaces/ListenerOptions.html":{}}}],["restriction",{"_index":358,"title":{},"body":{"license.html":{}}}],["result",{"_index":211,"title":{},"body":{"classes/Canceler.html":{},"classes/Channels.html":{},"interfaces/CommunicationChannels.html":{},"interfaces/IpcRendererEvent.html":{},"interfaces/ListenerOptions.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{}}}],["results",{"_index":213,"title":{},"body":{"classes/Canceler.html":{},"classes/Channels.html":{},"interfaces/CommunicationChannels.html":{},"interfaces/IpcRendererEvent.html":{},"interfaces/ListenerOptions.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{}}}],["return",{"_index":66,"title":{},"body":{"classes/Canceler.html":{},"classes/Channels.html":{},"interfaces/CommunicationChannels.html":{},"interfaces/ListenerOptions.html":{},"index.html":{}}}],["returns",{"_index":45,"title":{},"body":{"classes/Canceler.html":{},"classes/Channels.html":{},"interfaces/CommunicationChannels.html":{},"interfaces/ListenerOptions.html":{}}}],["rights",{"_index":360,"title":{},"body":{"license.html":{}}}],["rx",{"_index":322,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":50,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["see",{"_index":320,"title":{},"body":{"index.html":{}}}],["sell",{"_index":367,"title":{},"body":{"license.html":{}}}],["send",{"_index":130,"title":{},"body":{"classes/Canceler.html":{},"classes/Channels.html":{},"interfaces/CommunicationChannels.html":{},"interfaces/ListenerOptions.html":{}}}],["send(requestchannel",{"_index":97,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["senderid",{"_index":241,"title":{},"body":{"interfaces/IpcRendererEvent.html":{}}}],["sending",{"_index":94,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["sends",{"_index":92,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["sent",{"_index":107,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["server",{"_index":266,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["server(window.webcontents",{"_index":335,"title":{},"body":{"index.html":{}}}],["server.once('message",{"_index":336,"title":{},"body":{"index.html":{}}}],["service",{"_index":34,"title":{},"body":{"classes/Canceler.html":{},"classes/Channels.html":{},"interfaces/CommunicationChannels.html":{},"interfaces/ListenerOptions.html":{}}}],["set",{"_index":62,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["shall",{"_index":375,"title":{},"body":{"license.html":{}}}],["simply",{"_index":131,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["single",{"_index":188,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["software",{"_index":353,"title":{},"body":{"license.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/Canceler.html":{},"classes/Channels.html":{},"interfaces/CommunicationChannels.html":{},"interfaces/IpcRendererEvent.html":{},"interfaces/ListenerOptions.html":{}}}],["specified",{"_index":173,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["specifying",{"_index":138,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["spread",{"_index":71,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["src/.../aliases.ts",{"_index":411,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/agent.ts",{"_index":6,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{},"coverage.html":{}}}],["src/agent.ts:16",{"_index":37,"title":{},"body":{"classes/Canceler.html":{}}}],["src/agent.ts:21",{"_index":38,"title":{},"body":{"classes/Canceler.html":{}}}],["src/agent.ts:9",{"_index":25,"title":{},"body":{"classes/Canceler.html":{}}}],["src/aliases.ts",{"_index":240,"title":{},"body":{"interfaces/IpcRendererEvent.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/channels.ts",{"_index":214,"title":{},"body":{"classes/Channels.html":{},"interfaces/CommunicationChannels.html":{},"coverage.html":{}}}],["src/channels.ts:23",{"_index":227,"title":{},"body":{"classes/Channels.html":{}}}],["src/channels.ts:31",{"_index":233,"title":{},"body":{"classes/Channels.html":{}}}],["src/channels.ts:39",{"_index":230,"title":{},"body":{"classes/Channels.html":{}}}],["src/channels.ts:47",{"_index":222,"title":{},"body":{"classes/Channels.html":{}}}],["src/client.ts",{"_index":262,"title":{},"body":{"coverage.html":{}}}],["src/server.ts",{"_index":265,"title":{},"body":{"coverage.html":{}}}],["started",{"_index":276,"title":{"index.html":{},"license.html":{}},"body":{}}],["statements",{"_index":255,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":199,"title":{},"body":{"classes/Canceler.html":{},"classes/Channels.html":{},"interfaces/CommunicationChannels.html":{},"interfaces/ListenerOptions.html":{}}}],["still",{"_index":283,"title":{},"body":{"index.html":{}}}],["stop",{"_index":133,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["string",{"_index":22,"title":{},"body":{"classes/Canceler.html":{},"classes/Channels.html":{},"interfaces/CommunicationChannels.html":{},"interfaces/ListenerOptions.html":{}}}],["subject",{"_index":372,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":365,"title":{},"body":{"license.html":{}}}],["subscribed",{"_index":109,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["subscriber",{"_index":49,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["subscriber.complete",{"_index":203,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["subscriber.next(agent.transformobservableargs(args",{"_index":162,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["substantial",{"_index":377,"title":{},"body":{"license.html":{}}}],["supported",{"_index":157,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["supporting",{"_index":310,"title":{},"body":{"index.html":{}}}],["supports",{"_index":301,"title":{},"body":{"index.html":{}}}],["t",{"_index":91,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["table",{"_index":268,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":267,"title":{},"body":{"coverage.html":{}}}],["terminates",{"_index":118,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["this.getrequestchannel(origin",{"_index":236,"title":{},"body":{"classes/Channels.html":{},"interfaces/CommunicationChannels.html":{}}}],["this.getresponsechannel(origin",{"_index":237,"title":{},"body":{"classes/Channels.html":{},"interfaces/CommunicationChannels.html":{}}}],["this.handler",{"_index":61,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["this.ipcservice.on(requestchannel",{"_index":150,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["this.ipcservice.once(requestchannel",{"_index":184,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["this.ipcservice.once(responsechannel",{"_index":126,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["this.ipcservice.removealllisteners(channel",{"_index":210,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["this.ipcservice.removelistener(requestchannel",{"_index":164,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["this.ipcservice.removelistener(this.channel",{"_index":60,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["this.oncelistener(comchannels",{"_index":180,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["this.oncepromise(comchannels",{"_index":179,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["this.respond(event",{"_index":143,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["this.send(requestchannel",{"_index":127,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["through",{"_index":80,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{},"index.html":{}}}],["todo",{"_index":77,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["tort",{"_index":399,"title":{},"body":{"license.html":{}}}],["transform",{"_index":186,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["transformobservableargs(args",{"_index":200,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["treat",{"_index":139,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["true",{"_index":72,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["type",{"_index":31,"title":{},"body":{"classes/Canceler.html":{},"classes/Channels.html":{},"interfaces/CommunicationChannels.html":{},"interfaces/IpcRendererEvent.html":{},"interfaces/ListenerOptions.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["typealiases",{"_index":410,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":178,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["types/electron",{"_index":271,"title":{},"body":{"dependencies.html":{}}}],["uncaught",{"_index":111,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["undefined",{"_index":163,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["unsubscribe",{"_index":10,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["unsubscribes",{"_index":39,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["unsubscribing",{"_index":36,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["usage",{"_index":328,"title":{},"body":{"index.html":{}}}],["use",{"_index":35,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{},"index.html":{},"license.html":{}}}],["using",{"_index":154,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["value",{"_index":132,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["values",{"_index":67,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["view",{"_index":246,"title":{},"body":{"interfaces/IpcRendererEvent.html":{}}}],["void",{"_index":46,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}],["want",{"_index":308,"title":{},"body":{"index.html":{}}}],["warranties",{"_index":385,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":380,"title":{},"body":{"license.html":{}}}],["webcontents",{"_index":243,"title":{},"body":{"interfaces/IpcRendererEvent.html":{}}}],["whether",{"_index":70,"title":{},"body":{"classes/Canceler.html":{},"classes/Channels.html":{},"interfaces/CommunicationChannels.html":{},"interfaces/ListenerOptions.html":{},"license.html":{}}}],["without",{"_index":357,"title":{},"body":{"license.html":{}}}],["work",{"_index":284,"title":{},"body":{"index.html":{}}}],["wrapper",{"_index":278,"title":{},"body":{"index.html":{}}}],["yield",{"_index":193,"title":{},"body":{"classes/Canceler.html":{},"interfaces/ListenerOptions.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/Canceler.html":{"url":"classes/Canceler.html","title":"class - Canceler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Canceler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/agent.ts\n        \n\n            \n                Description\n            \n            \n                Represents a helper to unsubscribe a listener function from a channel.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                channel\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                cancel\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(ipcService: IpcService, channel: string, handler: Function)\n                    \n                \n                        \n                            \n                                Defined in src/agent.ts:9\n                            \n                        \n\n                \n                    \n                            Initializes a new Canceler.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        ipcService\n                                                  \n                                                        \n                                                                    IpcService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The IPC service to use for unsubscribing\n\n                                                        \n                                                \n                                                \n                                                        channel\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The channel to unsubscribe from\n\n                                                        \n                                                \n                                                \n                                                        handler\n                                                  \n                                                        \n                                                                    Function\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The listener to unsubscribe\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            channel\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/agent.ts:16\n                            \n                        \n\n                \n                    \n                        The channel to unsubscribe from\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            cancel\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        cancel()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/agent.ts:21\n                            \n                        \n\n\n                \n                    \n                            Unsubscribes the listener, meaning it will no longer be called when a message is received.\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Observable, Subscriber } from 'rxjs';\nimport { Channels, CommunicationChannels } from './channels';\nimport { IpcEvent, IpcService } from './aliases';\nimport Promise from 'any-promise';\n\n/**\n * Represents a helper to unsubscribe a listener function from a channel.\n */\nexport class Canceler {\n  /**\n   * Initializes a new Canceler.\n   * @param ipcService The IPC service to use for unsubscribing\n   * @param channel The channel to unsubscribe from\n   * @param handler The listener to unsubscribe\n   */\n  constructor(private ipcService: IpcService, public channel: string, private handler: Function) {}\n\n  /**\n   * Unsubscribes the listener, meaning it will no longer be called when a message is received.\n   */\n  public cancel(): void {\n    this.ipcService.removeListener(this.channel, this.handler);\n  }\n}\n\n/**\n * Represents a set of options for handling listener arguments and return values.\n */\nexport interface ListenerOptions {\n  /**\n   * Whether the listener should be called with spread arguments (true) or an arguments array (false, default).\n   */\n  spread: boolean;\n}\n\n// TODO: Replies\n/**\n * Represents an IPC communicator through which messages can be posted and received.\n */\nexport abstract class Agent {\n  /**\n   * Initializes a new Agent for the given Electron IPC service.\n   * @param ipcService Either the ipcMain or the ipcRenderer service from Electron\n   */\n  protected constructor(protected ipcService: T) {}\n\n  /**\n   * Sends a message to the other service.\n   * @param requestChannel The channel to use for sending the request\n   * @param data The request data\n   */\n  protected abstract send(requestChannel: string, ...data: any[]): void;\n\n  /**\n   * Responds to a given event from the other process.\n   * @param event The event to respond to\n   * @param responseChannel The channel to use for sending the response\n   * @param data The response data\n   */\n  protected abstract respond(event: IpcEvent, responseChannel: string, ...data: any[]): void;\n\n  // TODO: Mention at post$() that the message will only be sent ONCE the Observable is subscribed.\n  // TODO: The Promise should be rejected if an uncaught error occurred at the listening endpoint.\n  /**\n   * Posts a message to the given channel.\n   * The Promise resolves either when a response is received or when the listening endpoint terminates.\n   * @param channel The channel to post to\n   * @param data The message to post\n   */\n  public post(channel: string, ...data: any[]): Promise {\n    const { requestChannel, responseChannel } = Channels.getCommunicationChannels(channel);\n    const response = new Promise((resolve, reject) => {\n      const handler = (event: IpcEvent, ...args: any[]) => {\n        resolve(args);\n      };\n      this.ipcService.once(responseChannel, handler);\n    });\n    this.send(requestChannel, ...data);\n    return response;\n  }\n\n  /**\n   * Listens for messages on the given channel and calls the given listener when a message is received.\n   * To send a response, simply have the listener function return a value or a Promise.\n   * To stop listening, just call cancel() on the return value of this method.\n   * @param channel The channel to listen to\n   * @param listener The listener to call for each received message\n   * @param options Options specifying how to treat the listener function\n   */\n  public on(channel: string, listener: Function, options: ListenerOptions): Canceler {\n    const { requestChannel, responseChannel } = Channels.getCommunicationChannels(channel);\n    const params = Object.assign(\n      {\n        spread: false,\n      },\n      options,\n    );\n    const handler = (event: IpcEvent, ...args: any[]) => {\n      const respond = (...data: any[]) => this.respond(event, responseChannel, ...data);\n      const response: any = params.spread ? listener(...args) : listener(args);\n      if (response instanceof Promise) {\n        response.then(respond);\n      } else {\n        respond(response);\n      }\n    };\n    this.ipcService.on(requestChannel, handler);\n    return new Canceler(this.ipcService, requestChannel, handler);\n  }\n\n  /**\n   * Listens for messages on the given channel and emits them when received.\n   * Responses using Observables are currently not supported, use on() instead if you need to respond.\n   * @param channel The channel to listen to\n   */\n  public on$(channel: string): Observable {\n    const { requestChannel, responseChannel } = Channels.getCommunicationChannels(channel);\n    return new Observable((subscriber: Subscriber) => {\n      const listener = (event: IpcEvent, ...args: any[]) => {\n        subscriber.next(Agent.transformObservableArgs(args));\n        const response: any = undefined;\n        this.respond(event, responseChannel, response);\n      };\n      this.ipcService.on(requestChannel, listener);\n      return () => this.ipcService.removeListener(requestChannel, listener);\n    });\n  }\n\n  /**\n   * Listens for a message on the given channel. The Promise resolves once a message was received.\n   * Canceling is only possible through the use of an additional library like Bluebird, not with native Promises.\n   * Responses using Promises are currently not supported. If you need to respond, use a listener instead.\n   * @param channel The channel to listen to\n   */\n  public once(channel: string): Promise;\n  /**\n   * Listens for a message on the given channel and calls the given listener when it is received.\n   * To send a response, simply have the listener function return a value or a Promise.\n   * To stop listening, just call cancel() on the return value of this method.\n   * @param channel The channel to listen to\n   * @param listener The listener to call once the message was received\n   * @param options Options specifying how to treat the listener function\n   */\n  public once(channel: string, listener: Function, options?: ListenerOptions): Canceler;\n  /**\n   * Listens for a message on the given channel and calls the given listener when it is received.\n   * If no listener is specified, this method returns a Promise that resolves once the message is received instead.\n   * To send a response, simply have the listener function return a value or a Promise.\n   * To stop listening, just call cancel() on the return value of this method.\n   * Canceling a Promise is only possible through the use of an additional library like Bluebird, not natively.\n   * Responses using Promises are currently not supported. If you need to respond, use a listener instead.\n   * @param channel The channel to listen to\n   * @param listener The listener to call once the message was received (or nothing to use Promises instead)\n   * @param options Options specifying how to treat the listener function (ignored when using Promises)\n   */\n  public once(channel: string, listener?: Function, options?: ListenerOptions) {\n    const comChannels = Channels.getCommunicationChannels(channel);\n    if (typeof listener === 'undefined') {\n      return this.oncePromise(comChannels);\n    } else {\n      return this.onceListener(comChannels, listener, options);\n    }\n  }\n\n  /**\n   * Listens for a message. The Promise resolves once a message was received.\n   * @param comChannels The communication channels to use for sending and receiving messages\n   */\n  private oncePromise(comChannels: CommunicationChannels): Promise {\n    const { requestChannel, responseChannel } = comChannels;\n    return new Promise((resolve, reject) => {\n      const handler = (event: IpcEvent, ...args: any[]) => {\n        resolve(args);\n        const response: any = undefined;\n        this.respond(event, responseChannel, response);\n      };\n      this.ipcService.once(requestChannel, handler);\n    });\n  }\n\n  /**\n   * Listens for a message and calls the given listener when it is received.\n   * @param comChannels The communication channels to use for sending and receiving messages\n   * @param listener The listener to call once the message was received\n   * @param options Options specifying how to treat the listener function\n   */\n  private onceListener(comChannels: CommunicationChannels, listener: Function, options?: ListenerOptions): Canceler {\n    const { requestChannel, responseChannel } = comChannels;\n    const params = Object.assign(\n      {\n        spread: false,\n      },\n      options,\n    );\n    const handler = (event: IpcEvent, ...args: any[]) => {\n      const respond = (...data: any[]) => this.respond(event, responseChannel, ...data);\n      const response: any = params.spread ? listener(...args) : listener(args);\n      if (response instanceof Promise) {\n        response.then(respond);\n      } else {\n        respond(response);\n      }\n    };\n    this.ipcService.once(requestChannel, handler);\n    return new Canceler(this.ipcService, requestChannel, handler);\n  }\n\n  /**\n   * Transform data to fit into a single argument.\n   * Arrays with length 0 will yield undefined.\n   * Arrays with length 1 will yield the object at index 0.\n   * Arrays with length 2 or above will yield the input array.\n   * @param args The arguments to transform\n   */\n  protected static transformObservableArgs(args: any[]): any | any[] {\n    const type = Math.min(args.length, 2);\n    return type  {\n    const { requestChannel, responseChannel } = Channels.getCommunicationChannels(channel);\n    return new Observable(subscriber => {\n      const listener = (event: IpcEvent, ...args: any[]) => {\n        subscriber.next(Agent.transformObservableArgs(args));\n        subscriber.complete();\n        const response: any = undefined;\n        this.respond(event, responseChannel, response);\n      };\n      this.ipcService.once(requestChannel, listener);\n      return () => this.ipcService.removeListener(requestChannel, listener);\n    });\n  }\n\n  // TODO: Request Promises and Observables should be rejected when removeAllListeners() is called.\n  /**\n   * Unsubscribes all listeners from all channels.\n   */\n  public removeAllListeners(): void;\n  /**\n   * Unsubscribes all listeners from the given channel.\n   * @param channel The channel to unsubscribe from\n   */\n  public removeAllListeners(channel: string): void;\n  /**\n   * Unsubscribes all listeners from the given channel. Omit the channel to unsubscribe from all channels.\n   * @param channel The channel to unsubscribe from (or nothing)\n   */\n  public removeAllListeners(channel?: string): void {\n    const channels = [];\n    if (typeof channel !== 'undefined') {\n      channels.push(Channels.getRequestChannel(channel));\n    } else {\n      channels.push(...this.ipcService.eventNames().filter(Channels.isRequestChannel));\n    }\n    for (let channel of channels) {\n      this.ipcService.removeAllListeners(channel);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Channels.html":{"url":"classes/Channels.html","title":"class - Channels","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Channels\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/channels.ts\n        \n\n            \n                Description\n            \n            \n                Represents a service for generating channel names.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                getCommunicationChannels\n                            \n                            \n                                    Static\n                                getRequestChannel\n                            \n                            \n                                    Static\n                                getResponseChannel\n                            \n                            \n                                    Static\n                                isRequestChannel\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            getCommunicationChannels\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getCommunicationChannels(origin: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/channels.ts:47\n                            \n                        \n\n\n                \n                    \n                            Returns a pair of communication channels for the given origin.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        origin\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                The origin/Electron channel name\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     CommunicationChannels\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            getRequestChannel\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getRequestChannel(origin: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/channels.ts:23\n                            \n                        \n\n\n                \n                    \n                            Returns the channel to send requests to for the given origin.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        origin\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                The origin/Electron channel name\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     string\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            getResponseChannel\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getResponseChannel(origin: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/channels.ts:39\n                            \n                        \n\n\n                \n                    \n                            Returns the channel to receive responses from for the given origin.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        origin\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                The origin/Electron channel name\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     string\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            isRequestChannel\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        isRequestChannel(channel: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/channels.ts:31\n                            \n                        \n\n\n                \n                    \n                            Returns whether the given channel name belongs to a request channel.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        channel\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     boolean\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        export interface CommunicationChannels {\n  /**\n   * The channel to send requests to.\n   */\n  requestChannel: string;\n  /**\n   * The channel to receive responses from.\n   */\n  responseChannel: string;\n}\n\n/**\n * Represents a service for generating channel names.\n */\nexport class Channels {\n  /**\n   * Returns the channel to send requests to for the given origin.\n   * @param origin The origin/Electron channel name\n   */\n  public static getRequestChannel(origin: string): string {\n    return `${origin}-request`;\n  }\n\n  /**\n   * Returns whether the given channel name belongs to a request channel.\n   * @param channel\n   */\n  public static isRequestChannel(channel: string): boolean {\n    return channel.endsWith('-request');\n  }\n\n  /**\n   * Returns the channel to receive responses from for the given origin.\n   * @param origin The origin/Electron channel name\n   */\n  public static getResponseChannel(origin: string): string {\n    return `${origin}-response`;\n  }\n\n  /**\n   * Returns a pair of communication channels for the given origin.\n   * @param origin The origin/Electron channel name\n   */\n  public static getCommunicationChannels(origin: string): CommunicationChannels {\n    return {\n      requestChannel: this.getRequestChannel(origin),\n      responseChannel: this.getResponseChannel(origin),\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CommunicationChannels.html":{"url":"interfaces/CommunicationChannels.html","title":"interface - CommunicationChannels","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  CommunicationChannels\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/channels.ts\n        \n\n            \n                Description\n            \n            \n                Represents a pair of communication channels for requests and responses.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        requestChannel\n                                \n                                \n                                        responseChannel\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        requestChannel\n                                    \n                                \n                                \n                                    \n                                        requestChannel:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The channel to send requests to.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        responseChannel\n                                    \n                                \n                                \n                                    \n                                        responseChannel:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The channel to receive responses from.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface CommunicationChannels {\n  /**\n   * The channel to send requests to.\n   */\n  requestChannel: string;\n  /**\n   * The channel to receive responses from.\n   */\n  responseChannel: string;\n}\n\n/**\n * Represents a service for generating channel names.\n */\nexport class Channels {\n  /**\n   * Returns the channel to send requests to for the given origin.\n   * @param origin The origin/Electron channel name\n   */\n  public static getRequestChannel(origin: string): string {\n    return `${origin}-request`;\n  }\n\n  /**\n   * Returns whether the given channel name belongs to a request channel.\n   * @param channel\n   */\n  public static isRequestChannel(channel: string): boolean {\n    return channel.endsWith('-request');\n  }\n\n  /**\n   * Returns the channel to receive responses from for the given origin.\n   * @param origin The origin/Electron channel name\n   */\n  public static getResponseChannel(origin: string): string {\n    return `${origin}-response`;\n  }\n\n  /**\n   * Returns a pair of communication channels for the given origin.\n   * @param origin The origin/Electron channel name\n   */\n  public static getCommunicationChannels(origin: string): CommunicationChannels {\n    return {\n      requestChannel: this.getRequestChannel(origin),\n      responseChannel: this.getResponseChannel(origin),\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IpcRendererEvent.html":{"url":"interfaces/IpcRendererEvent.html","title":"interface - IpcRendererEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IpcRendererEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/aliases.ts\n        \n\n            \n                Description\n            \n            \n                Represents an Electron event as received when listening with ipcRenderer.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        senderId\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        senderId\n                                    \n                                \n                                \n                                    \n                                        senderId:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The Electron WebContents ID of the renderer view in the main process.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import IpcMain = Electron.IpcMain;\nimport IpcRenderer = Electron.IpcRenderer;\n\nexport type IpcMainEvent = Electron.Event;\n\n/**\n * Represents an Electron event as received when listening with ipcRenderer.\n */\nexport interface IpcRendererEvent {\n  /**\n   * The Electron WebContents ID of the renderer view in the main process.\n   */\n  senderId: number;\n}\n\nexport type IpcService = IpcMain | IpcRenderer;\nexport type IpcEvent = IpcMainEvent | IpcRendererEvent;\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ListenerOptions.html":{"url":"interfaces/ListenerOptions.html","title":"interface - ListenerOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ListenerOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/agent.ts\n        \n\n            \n                Description\n            \n            \n                Represents a set of options for handling listener arguments and return values.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        spread\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        spread\n                                    \n                                \n                                \n                                    \n                                        spread:     boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Whether the listener should be called with spread arguments (true) or an arguments array (false, default).\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Observable, Subscriber } from 'rxjs';\nimport { Channels, CommunicationChannels } from './channels';\nimport { IpcEvent, IpcService } from './aliases';\nimport Promise from 'any-promise';\n\n/**\n * Represents a helper to unsubscribe a listener function from a channel.\n */\nexport class Canceler {\n  /**\n   * Initializes a new Canceler.\n   * @param ipcService The IPC service to use for unsubscribing\n   * @param channel The channel to unsubscribe from\n   * @param handler The listener to unsubscribe\n   */\n  constructor(private ipcService: IpcService, public channel: string, private handler: Function) {}\n\n  /**\n   * Unsubscribes the listener, meaning it will no longer be called when a message is received.\n   */\n  public cancel(): void {\n    this.ipcService.removeListener(this.channel, this.handler);\n  }\n}\n\n/**\n * Represents a set of options for handling listener arguments and return values.\n */\nexport interface ListenerOptions {\n  /**\n   * Whether the listener should be called with spread arguments (true) or an arguments array (false, default).\n   */\n  spread: boolean;\n}\n\n// TODO: Replies\n/**\n * Represents an IPC communicator through which messages can be posted and received.\n */\nexport abstract class Agent {\n  /**\n   * Initializes a new Agent for the given Electron IPC service.\n   * @param ipcService Either the ipcMain or the ipcRenderer service from Electron\n   */\n  protected constructor(protected ipcService: T) {}\n\n  /**\n   * Sends a message to the other service.\n   * @param requestChannel The channel to use for sending the request\n   * @param data The request data\n   */\n  protected abstract send(requestChannel: string, ...data: any[]): void;\n\n  /**\n   * Responds to a given event from the other process.\n   * @param event The event to respond to\n   * @param responseChannel The channel to use for sending the response\n   * @param data The response data\n   */\n  protected abstract respond(event: IpcEvent, responseChannel: string, ...data: any[]): void;\n\n  // TODO: Mention at post$() that the message will only be sent ONCE the Observable is subscribed.\n  // TODO: The Promise should be rejected if an uncaught error occurred at the listening endpoint.\n  /**\n   * Posts a message to the given channel.\n   * The Promise resolves either when a response is received or when the listening endpoint terminates.\n   * @param channel The channel to post to\n   * @param data The message to post\n   */\n  public post(channel: string, ...data: any[]): Promise {\n    const { requestChannel, responseChannel } = Channels.getCommunicationChannels(channel);\n    const response = new Promise((resolve, reject) => {\n      const handler = (event: IpcEvent, ...args: any[]) => {\n        resolve(args);\n      };\n      this.ipcService.once(responseChannel, handler);\n    });\n    this.send(requestChannel, ...data);\n    return response;\n  }\n\n  /**\n   * Listens for messages on the given channel and calls the given listener when a message is received.\n   * To send a response, simply have the listener function return a value or a Promise.\n   * To stop listening, just call cancel() on the return value of this method.\n   * @param channel The channel to listen to\n   * @param listener The listener to call for each received message\n   * @param options Options specifying how to treat the listener function\n   */\n  public on(channel: string, listener: Function, options: ListenerOptions): Canceler {\n    const { requestChannel, responseChannel } = Channels.getCommunicationChannels(channel);\n    const params = Object.assign(\n      {\n        spread: false,\n      },\n      options,\n    );\n    const handler = (event: IpcEvent, ...args: any[]) => {\n      const respond = (...data: any[]) => this.respond(event, responseChannel, ...data);\n      const response: any = params.spread ? listener(...args) : listener(args);\n      if (response instanceof Promise) {\n        response.then(respond);\n      } else {\n        respond(response);\n      }\n    };\n    this.ipcService.on(requestChannel, handler);\n    return new Canceler(this.ipcService, requestChannel, handler);\n  }\n\n  /**\n   * Listens for messages on the given channel and emits them when received.\n   * Responses using Observables are currently not supported, use on() instead if you need to respond.\n   * @param channel The channel to listen to\n   */\n  public on$(channel: string): Observable {\n    const { requestChannel, responseChannel } = Channels.getCommunicationChannels(channel);\n    return new Observable((subscriber: Subscriber) => {\n      const listener = (event: IpcEvent, ...args: any[]) => {\n        subscriber.next(Agent.transformObservableArgs(args));\n        const response: any = undefined;\n        this.respond(event, responseChannel, response);\n      };\n      this.ipcService.on(requestChannel, listener);\n      return () => this.ipcService.removeListener(requestChannel, listener);\n    });\n  }\n\n  /**\n   * Listens for a message on the given channel. The Promise resolves once a message was received.\n   * Canceling is only possible through the use of an additional library like Bluebird, not with native Promises.\n   * Responses using Promises are currently not supported. If you need to respond, use a listener instead.\n   * @param channel The channel to listen to\n   */\n  public once(channel: string): Promise;\n  /**\n   * Listens for a message on the given channel and calls the given listener when it is received.\n   * To send a response, simply have the listener function return a value or a Promise.\n   * To stop listening, just call cancel() on the return value of this method.\n   * @param channel The channel to listen to\n   * @param listener The listener to call once the message was received\n   * @param options Options specifying how to treat the listener function\n   */\n  public once(channel: string, listener: Function, options?: ListenerOptions): Canceler;\n  /**\n   * Listens for a message on the given channel and calls the given listener when it is received.\n   * If no listener is specified, this method returns a Promise that resolves once the message is received instead.\n   * To send a response, simply have the listener function return a value or a Promise.\n   * To stop listening, just call cancel() on the return value of this method.\n   * Canceling a Promise is only possible through the use of an additional library like Bluebird, not natively.\n   * Responses using Promises are currently not supported. If you need to respond, use a listener instead.\n   * @param channel The channel to listen to\n   * @param listener The listener to call once the message was received (or nothing to use Promises instead)\n   * @param options Options specifying how to treat the listener function (ignored when using Promises)\n   */\n  public once(channel: string, listener?: Function, options?: ListenerOptions) {\n    const comChannels = Channels.getCommunicationChannels(channel);\n    if (typeof listener === 'undefined') {\n      return this.oncePromise(comChannels);\n    } else {\n      return this.onceListener(comChannels, listener, options);\n    }\n  }\n\n  /**\n   * Listens for a message. The Promise resolves once a message was received.\n   * @param comChannels The communication channels to use for sending and receiving messages\n   */\n  private oncePromise(comChannels: CommunicationChannels): Promise {\n    const { requestChannel, responseChannel } = comChannels;\n    return new Promise((resolve, reject) => {\n      const handler = (event: IpcEvent, ...args: any[]) => {\n        resolve(args);\n        const response: any = undefined;\n        this.respond(event, responseChannel, response);\n      };\n      this.ipcService.once(requestChannel, handler);\n    });\n  }\n\n  /**\n   * Listens for a message and calls the given listener when it is received.\n   * @param comChannels The communication channels to use for sending and receiving messages\n   * @param listener The listener to call once the message was received\n   * @param options Options specifying how to treat the listener function\n   */\n  private onceListener(comChannels: CommunicationChannels, listener: Function, options?: ListenerOptions): Canceler {\n    const { requestChannel, responseChannel } = comChannels;\n    const params = Object.assign(\n      {\n        spread: false,\n      },\n      options,\n    );\n    const handler = (event: IpcEvent, ...args: any[]) => {\n      const respond = (...data: any[]) => this.respond(event, responseChannel, ...data);\n      const response: any = params.spread ? listener(...args) : listener(args);\n      if (response instanceof Promise) {\n        response.then(respond);\n      } else {\n        respond(response);\n      }\n    };\n    this.ipcService.once(requestChannel, handler);\n    return new Canceler(this.ipcService, requestChannel, handler);\n  }\n\n  /**\n   * Transform data to fit into a single argument.\n   * Arrays with length 0 will yield undefined.\n   * Arrays with length 1 will yield the object at index 0.\n   * Arrays with length 2 or above will yield the input array.\n   * @param args The arguments to transform\n   */\n  protected static transformObservableArgs(args: any[]): any | any[] {\n    const type = Math.min(args.length, 2);\n    return type  {\n    const { requestChannel, responseChannel } = Channels.getCommunicationChannels(channel);\n    return new Observable(subscriber => {\n      const listener = (event: IpcEvent, ...args: any[]) => {\n        subscriber.next(Agent.transformObservableArgs(args));\n        subscriber.complete();\n        const response: any = undefined;\n        this.respond(event, responseChannel, response);\n      };\n      this.ipcService.once(requestChannel, listener);\n      return () => this.ipcService.removeListener(requestChannel, listener);\n    });\n  }\n\n  // TODO: Request Promises and Observables should be rejected when removeAllListeners() is called.\n  /**\n   * Unsubscribes all listeners from all channels.\n   */\n  public removeAllListeners(): void;\n  /**\n   * Unsubscribes all listeners from the given channel.\n   * @param channel The channel to unsubscribe from\n   */\n  public removeAllListeners(channel: string): void;\n  /**\n   * Unsubscribes all listeners from the given channel. Omit the channel to unsubscribe from all channels.\n   * @param channel The channel to unsubscribe from (or nothing)\n   */\n  public removeAllListeners(channel?: string): void {\n    const channels = [];\n    if (typeof channel !== 'undefined') {\n      channels.push(Channels.getRequestChannel(channel));\n    } else {\n      channels.push(...this.ipcService.eventNames().filter(Channels.isRequestChannel));\n    }\n    for (let channel of channels) {\n      this.ipcService.removeAllListeners(channel);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/agent.ts\n            \n            class\n            Agent\n            \n                100 %\n                (17/17)\n            \n        \n        \n            \n                \n                src/agent.ts\n            \n            class\n            Canceler\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/agent.ts\n            \n            interface\n            ListenerOptions\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/aliases.ts\n            \n            interface\n            IpcRendererEvent\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/channels.ts\n            \n            class\n            Channels\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/channels.ts\n            \n            interface\n            CommunicationChannels\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/client.ts\n            \n            class\n            Client\n            \n                100 %\n                (19/19)\n            \n        \n        \n            \n                \n                src/server.ts\n            \n            class\n            Server\n            \n                100 %\n                (19/19)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @types/electron : ^1.6.10\n        \n            any-promise : ^1.3.0\n        \n            electron : ^4.0.4\n    \n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nelectron-ipc\n\nAn easy-to-use wrapper around Electron's inter-process communication API\nThis package is still a work in progress. As always, constructive feedback\nand issue reports are appreciated. However, please refrain from reporting\nmissing features (including missing method overloads) if they are already on\nthe features list!\nFeatures\nThis package supports the following means of asynchronous communication:\n\nListeners\nNative Promises\nCustom Promises (like bluebird)\n\nExtensions\nCancelable Promises\nIf you want to use cancelable Promises, just install a Promise library like\nbluebird supporting this feature,\nthen register your Promise constructor with any-promise like this:\nrequire('any-promise/register/bluebird')any-promise is automatically installed through a dependency of this package.\nFor more information, see\nany-promise.\nObservables\nIf you want to use Observables, just install @axaptional/electron-ipc-rx,\nwhich will add $-postfix counterparts to most methods, e.g. post$(...).\nFor more information, see\nelectron-ipc-rx.\nInstallation\nUsage\nPost messages and receive data\n// Renderer Process\nimport { Client } from '@axaptional/electron-ipc'\n\nconst client = new Client()\nclient.post('message', \"This is my message\").then(response => {\n  console.log(response) // Prints \"And here's the reply\"\n})// Main Process\nimport { Server } from '@axaptional/electron-ipc'\n\nconst server = new Server(window.webContents)\nserver.once('message', message => {\n  return \"And here's the reply\"\n})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2019-present André Mategka\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    5 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    3 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            IpcEvent   (src/.../aliases.ts)\n                        \n                        \n                            IpcMainEvent   (src/.../aliases.ts)\n                        \n                        \n                            IpcService   (src/.../aliases.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/aliases.ts\n    \n    \n        \n            \n                \n                    \n                    IpcEvent\n                \n            \n            \n                \n                        IpcMainEvent | IpcRendererEvent\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    IpcMainEvent\n                \n            \n            \n                \n                        Electron.Event\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    IpcService\n                \n            \n            \n                \n                        IpcMain | IpcRenderer\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
