var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.5","fields":["title","body"],"fieldVectors":[["title/interfaces/Cancelable.html",[0,0.283,1,1.07]],["body/interfaces/Cancelable.html",[0,0.309,1,1.7,2,1.165,3,0.971,4,0.971,5,0.66,6,1.69,7,0.971,8,1.417,9,1.804,10,2.724,11,0.66,12,1.83,13,2.716,14,1.69,15,2.674,16,2.724,17,1.165,18,0.073,19,2.466,20,1.398,21,1.804,22,1.398,23,1.271,24,2.081,25,2.466,26,2.466,27,1.83,28,1.804,29,0.66,30,1.525,31,2.081,32,1.69,33,1.165,34,1.7,35,1.165,36,1.165,37,1.165,38,2.081,39,2.212,40,1.398,41,2.212,42,1.525,43,1.165,44,1.69,45,2.081,46,2.081,47,1.69,48,1.398,49,1.165,50,2.081,51,2.081,52,0.039,53,0.052,54,0.039]],["title/classes/Canceler.html",[29,0.606,30,1.07]],["body/classes/Canceler.html",[0,0.269,1,1.586,3,0.846,4,0.846,5,0.575,6,1.472,7,1.159,8,1.322,9,1.391,10,1.813,11,0.575,12,1.669,13,2.593,14,2.301,16,1.813,17,1.015,18,0.072,19,2.301,20,1.218,21,1.89,22,1.218,23,1.159,24,2.483,25,2.742,26,2.677,27,2.145,28,1.994,29,0.575,30,1.706,31,2.483,32,2.017,33,1.391,34,1.586,35,1.391,36,1.391,37,1.391,38,2.483,39,2.475,40,1.669,41,2.017,42,1.846,43,1.706,44,2.017,45,2.483,46,2.483,47,2.017,48,1.669,49,1.391,50,1.813,51,1.813,52,0.034,53,0.047,54,0.034,55,1.472,56,1.669,57,2.329,58,2.329,59,1.813,60,1.472,61,0.961,62,1.813,63,2.329,64,2.329]],["title/classes/Channels.html",[29,0.606,65,1.07]],["body/classes/Channels.html",[0,0.222,3,0.698,4,0.698,5,0.474,7,1.306,8,1.012,11,0.474,12,1.457,14,2.272,17,1.942,18,0.072,23,1.012,28,2.048,29,0.474,34,1.566,36,1.214,42,1.566,43,2.023,52,0.028,53,0.041,54,0.028,55,1.214,59,2.797,60,2.817,61,1.082,62,2.797,65,1.566,66,1.214,67,2.168,68,2.168,69,2.817,70,2.55,71,2.55,72,2.55,73,2.55,74,1.921,75,1.921,76,2.168,77,1.457,78,2.658,79,3.596,80,3.097,81,1.428,82,1.921,83,1.921,84,2.072,85,2.55,86,1.921,87,1.921,88,2.072,89,1.714,90,1.921,91,1.921,92,1.761,93,2.168,94,2.272,95,1.761,96,1.761,97,1.761,98,1.88,99,1.495,100,1.214,101,1.495,102,1.495]],["title/interfaces/CommunicationChannels.html",[0,0.283,81,1.07]],["body/interfaces/CommunicationChannels.html",[0,0.266,2,1.004,3,0.837,4,0.837,5,0.568,7,0.837,8,1.15,11,0.568,17,1.698,18,0.073,23,1.15,28,2.033,29,0.568,34,1.698,36,1.004,42,1.698,43,2.007,52,0.034,53,0.047,54,0.034,56,1.656,60,2.463,61,0.953,65,1.577,66,1.456,67,1.792,68,1.792,69,2.463,70,1.792,71,1.792,72,1.792,73,1.792,76,2.464,77,1.656,78,2.463,79,3.554,80,2.816,81,1.577,84,2.287,85,3.033,88,2.287,89,2.038,92,1.456,93,1.792,94,2.287,95,1.456,96,2.582,97,2.582,98,2.038,99,1.792,100,1.456,101,1.792,102,1.792]],["title/interfaces/IpcRendererEvent.html",[0,0.283,103,1.284]],["body/interfaces/IpcRendererEvent.html",[0,0.33,2,1.246,3,1.038,4,1.038,5,0.705,7,1.038,8,1.327,9,1.593,11,0.705,18,0.072,21,1.246,23,1.657,49,1.593,52,0.042,53,0.054,54,0.042,56,1.911,61,1.373,103,2.107,104,1.807,105,1.85,106,2.31,107,2.844,108,2.684,109,4.246,110,4.029,111,3.135,112,3.655,113,2.844,114,3.655,115,2.844,116,2.31,117,2.225,118,2.225,119,2.225,120,2.844,121,2.225,122,1.807]],["title/interfaces/Options.html",[0,0.283,123,1.07]],["body/interfaces/Options.html",[0,0.088,2,0.331,3,0.276,4,0.276,5,0.187,7,0.276,8,0.637,9,0.331,11,0.187,13,1.108,17,0.764,18,0.073,19,1.5,20,1.096,21,0.764,22,0.397,23,0.48,25,0.835,26,2.61,27,1.69,28,1.846,29,0.187,30,1.034,32,0.48,33,1.034,34,1.884,35,0.764,36,0.764,37,1.354,39,2.229,40,0.397,41,1.324,42,1.292,43,1.354,44,0.835,47,0.48,48,1.986,49,1.537,52,0.011,53,0.019,54,0.011,56,0.691,61,0.229,65,1.292,69,1.108,77,0.691,78,2.401,81,0.764,84,1.324,89,0.691,94,1.108,95,0.48,96,1.874,97,1.964,98,2.125,100,2.466,105,0.575,106,1.874,107,1.847,108,0.48,116,0.48,122,1.646,123,1.96,124,0.591,125,3.527,126,1.321,127,2.026,128,2.374,129,2.91,130,3.108,131,2.601,132,1.321,133,1.324,134,1.028,135,1.321,136,1.321,137,1.321,138,2.435,139,2.604,140,0.759,141,0.759,142,0.759,143,0.591,144,0.48,145,1.321,146,1.753,147,1.63,148,0.759,149,1.753,150,1.028,151,0.591,152,0.759,153,2.745,154,0.759,155,1.321,156,0.759,157,2.798,158,2.095,159,3.232,160,0.759,161,2.095,162,3.108,163,0.759,164,2.604,165,0.591,166,2.515,167,1.753,168,0.759,169,1.753,170,1.028,171,0.759,172,0.759,173,0.591,174,0.591,175,0.591,176,0.759,177,0.759,178,2.374,179,2.374,180,0.759,181,1.753,182,0.759,183,0.591,184,2.964,185,1.753,186,0.759,187,0.759,188,0.759,189,0.759,190,1.321,191,0.759,192,2.374,193,0.591,194,1.321,195,1.63,196,3.605,197,1.321,198,0.759,199,0.759,200,0.759,201,1.753,202,0.759,203,0.759,204,0.759,205,0.759,206,0.759,207,0.759,208,0.759,209,0.759,210,0.759,211,0.759,212,1.321,213,1.63,214,0.759,215,0.759,216,0.759,217,1.364,218,1.847,219,0.759,220,2.095,221,0.759,222,3.036,223,1.753,224,1.321,225,1.321,226,0.759,227,0.759,228,0.759,229,2.604,230,1.753,231,1.753,232,2.095,233,2.095,234,0.759,235,1.753,236,1.753,237,1.753,238,1.321,239,1.753,240,1.321,241,1.321,242,1.321,243,0.759,244,1.321,245,3.108,246,1.028,247,1.321,248,1.028,249,1.028,250,1.028,251,0.591,252,1.321,253,1.028,254,1.028,255,1.028,256,1.753,257,0.759,258,2.374,259,0.591,260,2.798,261,1.321,262,0.759,263,0.759,264,1.321,265,0.759,266,0.759,267,1.321,268,0.759,269,0.759,270,1.753,271,0.759,272,0.759,273,0.759,274,0.759,275,0.759]],["title/changelog.html",[276,1.309,277,1.309,278,1.612]],["body/changelog.html",[5,0.781,18,0.062,35,1.38,52,0.047,53,0.057,54,0.047,105,1.38,123,1.38,133,2.001,143,2.464,144,2.463,195,2.464,248,2.464,278,3.032,279,3.167,280,3.167,281,3.897,282,3.167,283,3.167,284,3.167,285,2.464,286,3.167,287,3.167,288,3.167,289,3.167,290,2.464,291,3.167,292,3.167,293,3.167,294,3.032,295,1.656,296,3.167,297,2.464,298,3.167,299,3.167,300,3.167,301,2.464,302,3.167,303,3.167,304,3.167,305,3.167,306,3.167,307,3.167,308,3.167,309,3.167,310,3.167,311,3.167,312,2.464,313,2.463,314,2.464,315,3.167,316,3.167,317,3.167]],["title/coverage.html",[318,2.573]],["body/coverage.html",[0,0.504,1,1.347,5,0.762,6,2.426,18,0.07,29,1.108,30,1.347,33,1.347,52,0.046,53,0.057,54,0.046,61,0.93,65,1.347,66,2.426,81,1.347,103,1.616,104,1.953,123,1.347,124,2.987,150,2.405,295,1.616,318,2.405,319,3.091,320,3.091,321,4.73,322,3.091,323,4.176,324,3.091,325,3.091,326,3.091,327,3.091,328,2.405,329,3.839,330,3.091,331,2.405,332,3.091,333,2.405]],["title/dependencies.html",[313,1.309,334,2.288]],["body/dependencies.html",[18,0.069,52,0.054,53,0.063,54,0.054,105,1.601,138,2.322,334,2.859,335,3.674,336,3.674,337,3.674,338,3.674]],["title/index.html",[11,0.511,276,1.309,277,1.309]],["body/index.html",[1,1.143,9,1.684,12,1.807,18,0.071,20,1.807,27,1.371,33,1.362,35,1.743,37,1.684,40,1.371,48,1.371,49,0.771,52,0.039,53,0.039,54,0.026,77,0.925,88,1.118,89,0.925,98,0.925,105,1.362,113,2.689,115,2.432,123,0.771,127,2.432,129,2.689,131,1.377,133,1.658,134,1.377,138,2.333,144,1.118,147,2.041,151,2.041,153,1.377,165,1.377,166,1.377,170,3.606,173,3.412,175,1.377,183,2.432,193,1.377,213,2.432,217,2.041,218,2.872,222,2.432,246,1.377,249,1.377,250,2.041,251,1.377,253,1.377,254,1.377,255,2.041,259,1.377,285,2.041,294,1.377,295,1.371,297,1.377,301,2.432,312,1.377,313,2.443,314,2.689,328,2.689,331,2.432,333,1.377,339,1.77,340,2.623,341,1.77,342,1.77,343,1.77,344,2.623,345,1.77,346,1.77,347,1.77,348,1.77,349,1.77,350,1.77,351,1.77,352,1.77,353,1.77,354,1.77,355,1.77,356,2.623,357,3.125,358,1.77,359,1.77,360,1.77,361,2.041,362,1.77,363,1.77,364,1.77,365,2.623,366,1.77,367,1.77,368,3.125,369,3.456,370,1.77,371,1.77,372,1.77,373,2.623,374,1.77,375,1.77,376,1.77,377,1.77,378,1.77,379,1.77,380,1.77,381,2.623,382,1.77,383,1.77,384,1.77,385,1.77,386,1.77,387,1.77,388,2.623,389,1.77,390,1.77,391,1.77,392,1.77,393,1.77,394,2.623,395,1.77,396,1.77,397,1.77,398,1.77,399,1.77,400,1.77,401,1.77,402,1.77,403,2.623,404,2.623,405,2.623,406,1.77,407,1.77,408,1.77,409,1.77,410,1.77,411,1.77,412,1.77,413,1.77,414,1.77,415,1.77,416,1.77,417,1.77,418,3.456,419,1.77,420,1.77,421,1.77,422,1.77,423,1.77,424,1.77,425,1.77,426,1.77,427,1.658,428,1.77,429,1.377]],["title/license.html",[276,1.309,277,1.309,427,1.309]],["body/license.html",[18,0.053,37,1.581,52,0.042,53,0.053,54,0.042,92,1.787,106,1.787,174,2.2,290,2.2,295,1.479,361,2.2,427,1.787,429,2.2,430,4.008,431,2.828,432,2.828,433,2.828,434,2.828,435,3.629,436,2.828,437,2.828,438,2.828,439,2.828,440,2.828,441,2.828,442,3.629,443,4.656,444,2.828,445,2.828,446,2.828,447,4.008,448,2.828,449,3.629,450,2.828,451,2.828,452,2.828,453,2.828,454,2.828,455,2.828,456,2.828,457,2.828,458,2.828,459,3.629,460,2.828,461,2.828,462,2.828,463,2.828,464,2.828,465,3.629,466,3.629,467,2.828,468,2.828,469,2.828,470,2.828,471,2.828,472,2.828,473,2.828,474,2.828,475,2.828,476,2.828,477,2.828,478,2.828,479,2.828,480,2.828,481,2.828,482,2.828,483,2.828,484,2.828,485,2.828,486,2.828,487,2.828,488,2.828,489,2.828,490,2.828,491,2.828,492,2.828,493,2.828,494,2.828,495,2.828]],["title/modules.html",[496,2.573]],["body/modules.html",[18,0.064,52,0.056,53,0.064,54,0.056,496,2.954]],["title/overview.html",[497,2.573]],["body/overview.html",[2,1.63,18,0.063,52,0.055,53,0.063,54,0.055,55,2.364,497,2.911,498,3.741,499,3.741]],["title/miscellaneous/typealiases.html",[500,1.612,501,2.941]],["body/miscellaneous/typealiases.html",[11,0.838,18,0.066,21,1.772,22,1.776,52,0.05,53,0.06,54,0.05,61,1.022,103,1.776,104,2.146,108,2.751,111,3.164,116,2.751,117,2.643,118,2.643,119,2.643,120,3.387,121,2.643,122,2.57,500,2.643,502,4.682]]],"invertedIndex":[["",{"_index":18,"title":{},"body":{"interfaces/Cancelable.html":{},"classes/Canceler.html":{},"classes/Channels.html":{},"interfaces/CommunicationChannels.html":{},"interfaces/IpcRendererEvent.html":{},"interfaces/Options.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{}}}],["0",{"_index":168,"title":{},"body":{"interfaces/Options.html":{}}}],["0.2.0",{"_index":289,"title":{},"body":{"changelog.html":{}}}],["02",{"_index":291,"title":{},"body":{"changelog.html":{}}}],["1",{"_index":170,"title":{},"body":{"interfaces/Options.html":{},"index.html":{}}}],["1.3.0",{"_index":337,"title":{},"body":{"dependencies.html":{}}}],["1.6.10",{"_index":336,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":321,"title":{},"body":{"coverage.html":{}}}],["15",{"_index":292,"title":{},"body":{"changelog.html":{}}}],["18/18",{"_index":322,"title":{},"body":{"coverage.html":{}}}],["2",{"_index":173,"title":{},"body":{"interfaces/Options.html":{},"index.html":{}}}],["2/2",{"_index":323,"title":{},"body":{"coverage.html":{}}}],["20/20",{"_index":329,"title":{},"body":{"coverage.html":{}}}],["2019",{"_index":290,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["3/3",{"_index":326,"title":{},"body":{"coverage.html":{}}}],["4",{"_index":499,"title":{},"body":{"overview.html":{}}}],["4.0.4",{"_index":338,"title":{},"body":{"dependencies.html":{}}}],["4/4",{"_index":324,"title":{},"body":{"coverage.html":{}}}],["5",{"_index":498,"title":{},"body":{"overview.html":{}}}],["5/5",{"_index":325,"title":{},"body":{"coverage.html":{}}}],["aborted",{"_index":10,"title":{},"body":{"interfaces/Cancelable.html":{},"classes/Canceler.html":{}}}],["above",{"_index":174,"title":{},"body":{"interfaces/Options.html":{},"license.html":{}}}],["abstract",{"_index":149,"title":{},"body":{"interfaces/Options.html":{}}}],["according",{"_index":194,"title":{},"body":{"interfaces/Options.html":{}}}],["action",{"_index":488,"title":{},"body":{"license.html":{}}}],["add",{"_index":384,"title":{},"body":{"index.html":{}}}],["added",{"_index":293,"title":{},"body":{"changelog.html":{}}}],["additional",{"_index":248,"title":{},"body":{"interfaces/Options.html":{},"changelog.html":{}}}],["adherence",{"_index":308,"title":{},"body":{"changelog.html":{}}}],["adheres",{"_index":286,"title":{},"body":{"changelog.html":{}}}],["adjust",{"_index":389,"title":{},"body":{"index.html":{}}}],["adjustment",{"_index":302,"title":{},"body":{"changelog.html":{}}}],["agent",{"_index":150,"title":{},"body":{"interfaces/Options.html":{},"coverage.html":{}}}],["agent.applywithstyle(listener",{"_index":238,"title":{},"body":{"interfaces/Options.html":{}}}],["agent.applywithstyle(resolve",{"_index":266,"title":{},"body":{"interfaces/Options.html":{}}}],["aliases",{"_index":22,"title":{},"body":{"interfaces/Cancelable.html":{},"classes/Canceler.html":{},"interfaces/Options.html":{},"miscellaneous/typealiases.html":{}}}],["allows",{"_index":354,"title":{},"body":{"index.html":{}}}],["alone",{"_index":350,"title":{},"body":{"index.html":{}}}],["and/or",{"_index":457,"title":{},"body":{"license.html":{}}}],["andr",{"_index":433,"title":{},"body":{"license.html":{}}}],["api",{"_index":344,"title":{},"body":{"index.html":{}}}],["apis",{"_index":358,"title":{},"body":{"index.html":{}}}],["applications",{"_index":351,"title":{},"body":{"index.html":{}}}],["applies",{"_index":414,"title":{},"body":{"index.html":{}}}],["applywithstyle",{"_index":199,"title":{},"body":{"interfaces/Options.html":{}}}],["args",{"_index":129,"title":{},"body":{"interfaces/Options.html":{},"index.html":{}}}],["args.length",{"_index":176,"title":{},"body":{"interfaces/Options.html":{}}}],["args[0",{"_index":177,"title":{},"body":{"interfaces/Options.html":{}}}],["argument",{"_index":133,"title":{},"body":{"interfaces/Options.html":{},"changelog.html":{},"index.html":{}}}],["arguments",{"_index":127,"title":{},"body":{"interfaces/Options.html":{},"index.html":{}}}],["arising",{"_index":492,"title":{},"body":{"license.html":{}}}],["around",{"_index":342,"title":{},"body":{"index.html":{}}}],["array",{"_index":131,"title":{},"body":{"interfaces/Options.html":{},"index.html":{}}}],["associated",{"_index":444,"title":{},"body":{"license.html":{}}}],["asynchronous",{"_index":362,"title":{},"body":{"index.html":{}}}],["atomize",{"_index":130,"title":{},"body":{"interfaces/Options.html":{}}}],["atomized",{"_index":165,"title":{},"body":{"interfaces/Options.html":{},"index.html":{}}}],["authors",{"_index":482,"title":{},"body":{"license.html":{}}}],["automatically",{"_index":378,"title":{},"body":{"index.html":{}}}],["available",{"_index":314,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["axaptional/electron",{"_index":369,"title":{},"body":{"index.html":{}}}],["based",{"_index":284,"title":{},"body":{"changelog.html":{}}}],["behavior",{"_index":301,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["being",{"_index":136,"title":{},"body":{"interfaces/Options.html":{}}}],["belongs",{"_index":93,"title":{},"body":{"classes/Channels.html":{},"interfaces/CommunicationChannels.html":{}}}],["bluebird",{"_index":250,"title":{},"body":{"interfaces/Options.html":{},"index.html":{}}}],["boolean",{"_index":95,"title":{},"body":{"classes/Channels.html":{},"interfaces/CommunicationChannels.html":{},"interfaces/Options.html":{}}}],["both",{"_index":357,"title":{},"body":{"index.html":{}}}],["browserwindow",{"_index":405,"title":{},"body":{"index.html":{}}}],["c",{"_index":431,"title":{},"body":{"license.html":{}}}],["call",{"_index":196,"title":{},"body":{"interfaces/Options.html":{}}}],["callbacks",{"_index":363,"title":{},"body":{"index.html":{}}}],["called",{"_index":47,"title":{},"body":{"interfaces/Cancelable.html":{},"classes/Canceler.html":{},"interfaces/Options.html":{}}}],["calls",{"_index":192,"title":{},"body":{"interfaces/Options.html":{}}}],["cancel",{"_index":13,"title":{},"body":{"interfaces/Cancelable.html":{},"classes/Canceler.html":{},"interfaces/Options.html":{}}}],["cancelable",{"_index":1,"title":{"interfaces/Cancelable.html":{}},"body":{"interfaces/Cancelable.html":{},"classes/Canceler.html":{},"coverage.html":{},"index.html":{}}}],["canceled/rejected",{"_index":269,"title":{},"body":{"interfaces/Options.html":{}}}],["canceler",{"_index":30,"title":{"classes/Canceler.html":{}},"body":{"interfaces/Cancelable.html":{},"classes/Canceler.html":{},"interfaces/Options.html":{},"coverage.html":{}}}],["canceler(this.ipcservice",{"_index":244,"title":{},"body":{"interfaces/Options.html":{}}}],["canceling",{"_index":246,"title":{},"body":{"interfaces/Options.html":{},"index.html":{}}}],["cancels",{"_index":16,"title":{},"body":{"interfaces/Cancelable.html":{},"classes/Canceler.html":{}}}],["case",{"_index":201,"title":{},"body":{"interfaces/Options.html":{}}}],["cases",{"_index":396,"title":{},"body":{"index.html":{}}}],["change",{"_index":214,"title":{},"body":{"interfaces/Options.html":{}}}],["changed",{"_index":303,"title":{},"body":{"changelog.html":{}}}],["changelog",{"_index":278,"title":{"changelog.html":{}},"body":{"changelog.html":{}}}],["changes",{"_index":280,"title":{},"body":{"changelog.html":{}}}],["channel",{"_index":28,"title":{},"body":{"interfaces/Cancelable.html":{},"classes/Canceler.html":{},"classes/Channels.html":{},"interfaces/CommunicationChannels.html":{},"interfaces/Options.html":{}}}],["channel.endswith",{"_index":99,"title":{},"body":{"classes/Channels.html":{},"interfaces/CommunicationChannels.html":{}}}],["channels",{"_index":65,"title":{"classes/Channels.html":{}},"body":{"classes/Channels.html":{},"interfaces/CommunicationChannels.html":{},"interfaces/Options.html":{},"coverage.html":{}}}],["channels.getcommunicationchannels(channel",{"_index":223,"title":{},"body":{"interfaces/Options.html":{}}}],["channels.push(...this.ipcservice.eventnames().filter(channels.isrequestchannel",{"_index":274,"title":{},"body":{"interfaces/Options.html":{}}}],["channels.push(channels.getrequestchannel(channel",{"_index":273,"title":{},"body":{"interfaces/Options.html":{}}}],["charge",{"_index":439,"title":{},"body":{"license.html":{}}}],["claim",{"_index":485,"title":{},"body":{"license.html":{}}}],["class",{"_index":29,"title":{"classes/Canceler.html":{},"classes/Channels.html":{}},"body":{"interfaces/Cancelable.html":{},"classes/Canceler.html":{},"classes/Channels.html":{},"interfaces/CommunicationChannels.html":{},"interfaces/Options.html":{},"coverage.html":{}}}],["classes",{"_index":55,"title":{},"body":{"classes/Canceler.html":{},"classes/Channels.html":{},"overview.html":{}}}],["client",{"_index":328,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["client.post('message",{"_index":399,"title":{},"body":{"index.html":{}}}],["code",{"_index":294,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["comchannels",{"_index":260,"title":{},"body":{"interfaces/Options.html":{}}}],["communication",{"_index":77,"title":{},"body":{"classes/Channels.html":{},"interfaces/CommunicationChannels.html":{},"interfaces/Options.html":{},"index.html":{}}}],["communicationchannels",{"_index":81,"title":{"interfaces/CommunicationChannels.html":{}},"body":{"classes/Channels.html":{},"interfaces/CommunicationChannels.html":{},"interfaces/Options.html":{},"coverage.html":{}}}],["communicator",{"_index":145,"title":{},"body":{"interfaces/Options.html":{}}}],["conditions",{"_index":464,"title":{},"body":{"license.html":{}}}],["configure",{"_index":188,"title":{},"body":{"interfaces/Options.html":{}}}],["connection",{"_index":494,"title":{},"body":{"license.html":{}}}],["console.log(response",{"_index":401,"title":{},"body":{"index.html":{}}}],["const",{"_index":222,"title":{},"body":{"interfaces/Options.html":{},"index.html":{}}}],["constructor",{"_index":40,"title":{},"body":{"interfaces/Cancelable.html":{},"classes/Canceler.html":{},"interfaces/Options.html":{},"index.html":{}}}],["constructor(ipcservice",{"_index":57,"title":{},"body":{"classes/Canceler.html":{}}}],["contract",{"_index":489,"title":{},"body":{"license.html":{}}}],["copies",{"_index":459,"title":{},"body":{"license.html":{}}}],["copy",{"_index":442,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":430,"title":{},"body":{"license.html":{}}}],["counterparts",{"_index":386,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":318,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["currently",{"_index":253,"title":{},"body":{"interfaces/Options.html":{},"index.html":{}}}],["custom",{"_index":365,"title":{},"body":{"index.html":{}}}],["damages",{"_index":486,"title":{},"body":{"license.html":{}}}],["data",{"_index":162,"title":{},"body":{"interfaces/Options.html":{}}}],["date",{"_index":143,"title":{},"body":{"interfaces/Options.html":{},"changelog.html":{}}}],["de/serialize",{"_index":141,"title":{},"body":{"interfaces/Options.html":{}}}],["deal",{"_index":446,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":495,"title":{},"body":{"license.html":{}}}],["default",{"_index":153,"title":{},"body":{"interfaces/Options.html":{},"index.html":{}}}],["defaultoptions",{"_index":155,"title":{},"body":{"interfaces/Options.html":{}}}],["defined",{"_index":14,"title":{},"body":{"interfaces/Cancelable.html":{},"classes/Canceler.html":{},"classes/Channels.html":{}}}],["dependencies",{"_index":334,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["dependency",{"_index":380,"title":{},"body":{"index.html":{}}}],["description",{"_index":7,"title":{},"body":{"interfaces/Cancelable.html":{},"classes/Canceler.html":{},"classes/Channels.html":{},"interfaces/CommunicationChannels.html":{},"interfaces/IpcRendererEvent.html":{},"interfaces/Options.html":{}}}],["detail",{"_index":424,"title":{},"body":{"index.html":{}}}],["detailed",{"_index":423,"title":{},"body":{"index.html":{}}}],["determines",{"_index":132,"title":{},"body":{"interfaces/Options.html":{}}}],["distribute",{"_index":455,"title":{},"body":{"license.html":{}}}],["documentation",{"_index":295,"title":{},"body":{"changelog.html":{},"coverage.html":{},"index.html":{},"license.html":{}}}],["documented",{"_index":282,"title":{},"body":{"changelog.html":{}}}],["dynamically",{"_index":306,"title":{},"body":{"changelog.html":{}}}],["e.g",{"_index":387,"title":{},"body":{"index.html":{}}}],["each",{"_index":234,"title":{},"body":{"interfaces/Options.html":{}}}],["easy",{"_index":339,"title":{},"body":{"index.html":{}}}],["electron",{"_index":105,"title":{},"body":{"interfaces/IpcRendererEvent.html":{},"interfaces/Options.html":{},"changelog.html":{},"dependencies.html":{},"index.html":{}}}],["electron's",{"_index":343,"title":{},"body":{"index.html":{}}}],["electron.event",{"_index":121,"title":{},"body":{"interfaces/IpcRendererEvent.html":{},"miscellaneous/typealiases.html":{}}}],["electron.ipcmain",{"_index":117,"title":{},"body":{"interfaces/IpcRendererEvent.html":{},"miscellaneous/typealiases.html":{}}}],["electron.ipcrenderer",{"_index":118,"title":{},"body":{"interfaces/IpcRendererEvent.html":{},"miscellaneous/typealiases.html":{}}}],["electron.webcontents",{"_index":119,"title":{},"body":{"interfaces/IpcRendererEvent.html":{},"miscellaneous/typealiases.html":{}}}],["endpoint",{"_index":212,"title":{},"body":{"interfaces/Options.html":{}}}],["error",{"_index":210,"title":{},"body":{"interfaces/Options.html":{}}}],["es2015",{"_index":364,"title":{},"body":{"index.html":{}}}],["event",{"_index":106,"title":{},"body":{"interfaces/IpcRendererEvent.html":{},"interfaces/Options.html":{},"license.html":{}}}],["exactly",{"_index":359,"title":{},"body":{"index.html":{}}}],["explanations",{"_index":426,"title":{},"body":{"index.html":{}}}],["export",{"_index":23,"title":{},"body":{"interfaces/Cancelable.html":{},"classes/Canceler.html":{},"classes/Channels.html":{},"interfaces/CommunicationChannels.html":{},"interfaces/IpcRendererEvent.html":{},"interfaces/Options.html":{}}}],["exports",{"_index":317,"title":{},"body":{"changelog.html":{}}}],["express",{"_index":473,"title":{},"body":{"license.html":{}}}],["extension",{"_index":312,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["fallbackoptions",{"_index":154,"title":{},"body":{"interfaces/Options.html":{}}}],["false",{"_index":189,"title":{},"body":{"interfaces/Options.html":{}}}],["feature",{"_index":372,"title":{},"body":{"index.html":{}}}],["features",{"_index":353,"title":{},"body":{"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/Cancelable.html":{},"classes/Canceler.html":{},"classes/Channels.html":{},"interfaces/CommunicationChannels.html":{},"interfaces/IpcRendererEvent.html":{},"interfaces/Options.html":{},"changelog.html":{},"coverage.html":{}}}],["files",{"_index":445,"title":{},"body":{"license.html":{}}}],["first",{"_index":171,"title":{},"body":{"interfaces/Options.html":{}}}],["fit",{"_index":410,"title":{},"body":{"index.html":{}}}],["fitness",{"_index":478,"title":{},"body":{"license.html":{}}}],["fixed",{"_index":316,"title":{},"body":{"changelog.html":{}}}],["following",{"_index":361,"title":{},"body":{"index.html":{},"license.html":{}}}],["format",{"_index":283,"title":{},"body":{"changelog.html":{}}}],["free",{"_index":438,"title":{},"body":{"license.html":{}}}],["function",{"_index":27,"title":{},"body":{"interfaces/Cancelable.html":{},"classes/Canceler.html":{},"interfaces/Options.html":{},"index.html":{}}}],["furnished",{"_index":462,"title":{},"body":{"license.html":{}}}],["generating",{"_index":67,"title":{},"body":{"classes/Channels.html":{},"interfaces/CommunicationChannels.html":{}}}],["getcommunicationchannels",{"_index":70,"title":{},"body":{"classes/Channels.html":{},"interfaces/CommunicationChannels.html":{}}}],["getcommunicationchannels(origin",{"_index":74,"title":{},"body":{"classes/Channels.html":{}}}],["getoptions",{"_index":206,"title":{},"body":{"interfaces/Options.html":{}}}],["getrequestchannel",{"_index":71,"title":{},"body":{"classes/Channels.html":{},"interfaces/CommunicationChannels.html":{}}}],["getrequestchannel(origin",{"_index":82,"title":{},"body":{"classes/Channels.html":{}}}],["getresponsechannel",{"_index":72,"title":{},"body":{"classes/Channels.html":{},"interfaces/CommunicationChannels.html":{}}}],["getresponsechannel(origin",{"_index":86,"title":{},"body":{"classes/Channels.html":{}}}],["getting",{"_index":276,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{}}],["given",{"_index":78,"title":{},"body":{"classes/Channels.html":{},"interfaces/CommunicationChannels.html":{},"interfaces/Options.html":{}}}],["granted",{"_index":437,"title":{},"body":{"license.html":{}}}],["handled",{"_index":135,"title":{},"body":{"interfaces/Options.html":{}}}],["handler",{"_index":39,"title":{},"body":{"interfaces/Cancelable.html":{},"classes/Canceler.html":{},"interfaces/Options.html":{}}}],["handler(...args",{"_index":204,"title":{},"body":{"interfaces/Options.html":{}}}],["handler(agent.atomize(args",{"_index":202,"title":{},"body":{"interfaces/Options.html":{}}}],["handler(args",{"_index":203,"title":{},"body":{"interfaces/Options.html":{}}}],["handlers",{"_index":156,"title":{},"body":{"interfaces/Options.html":{}}}],["handling",{"_index":126,"title":{},"body":{"interfaces/Options.html":{}}}],["help",{"_index":300,"title":{},"body":{"changelog.html":{}}}],["helper",{"_index":24,"title":{},"body":{"interfaces/Cancelable.html":{},"classes/Canceler.html":{}}}],["here",{"_index":403,"title":{},"body":{"index.html":{}}}],["hereby",{"_index":436,"title":{},"body":{"license.html":{}}}],["holders",{"_index":483,"title":{},"body":{"license.html":{}}}],["id",{"_index":112,"title":{},"body":{"interfaces/IpcRendererEvent.html":{}}}],["identifier",{"_index":319,"title":{},"body":{"coverage.html":{}}}],["implements",{"_index":31,"title":{},"body":{"interfaces/Cancelable.html":{},"classes/Canceler.html":{}}}],["implied",{"_index":474,"title":{},"body":{"license.html":{}}}],["import",{"_index":20,"title":{},"body":{"interfaces/Cancelable.html":{},"classes/Canceler.html":{},"interfaces/Options.html":{},"index.html":{}}}],["imported",{"_index":307,"title":{},"body":{"changelog.html":{}}}],["imports",{"_index":390,"title":{},"body":{"index.html":{}}}],["included",{"_index":467,"title":{},"body":{"license.html":{}}}],["including",{"_index":449,"title":{},"body":{"license.html":{}}}],["index",{"_index":11,"title":{"index.html":{}},"body":{"interfaces/Cancelable.html":{},"classes/Canceler.html":{},"classes/Channels.html":{},"interfaces/CommunicationChannels.html":{},"interfaces/IpcRendererEvent.html":{},"interfaces/Options.html":{},"miscellaneous/typealiases.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/Cancelable.html":{},"classes/Canceler.html":{},"classes/Channels.html":{},"interfaces/CommunicationChannels.html":{},"interfaces/IpcRendererEvent.html":{},"interfaces/Options.html":{}}}],["information",{"_index":297,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["initializes",{"_index":32,"title":{},"body":{"interfaces/Cancelable.html":{},"classes/Canceler.html":{},"interfaces/Options.html":{}}}],["initiate",{"_index":397,"title":{},"body":{"index.html":{}}}],["input",{"_index":175,"title":{},"body":{"interfaces/Options.html":{},"index.html":{}}}],["install",{"_index":368,"title":{},"body":{"index.html":{}}}],["installation",{"_index":366,"title":{},"body":{"index.html":{}}}],["installed",{"_index":379,"title":{},"body":{"index.html":{}}}],["instance",{"_index":180,"title":{},"body":{"interfaces/Options.html":{}}}],["instance's",{"_index":205,"title":{},"body":{"interfaces/Options.html":{}}}],["instanceof",{"_index":240,"title":{},"body":{"interfaces/Options.html":{}}}],["instances",{"_index":152,"title":{},"body":{"interfaces/Options.html":{}}}],["instead",{"_index":256,"title":{},"body":{"interfaces/Options.html":{}}}],["interface",{"_index":0,"title":{"interfaces/Cancelable.html":{},"interfaces/CommunicationChannels.html":{},"interfaces/IpcRendererEvent.html":{},"interfaces/Options.html":{}},"body":{"interfaces/Cancelable.html":{},"classes/Canceler.html":{},"classes/Channels.html":{},"interfaces/CommunicationChannels.html":{},"interfaces/IpcRendererEvent.html":{},"interfaces/Options.html":{},"coverage.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/Cancelable.html":{},"interfaces/CommunicationChannels.html":{},"interfaces/IpcRendererEvent.html":{},"interfaces/Options.html":{},"overview.html":{}}}],["ipc",{"_index":35,"title":{},"body":{"interfaces/Cancelable.html":{},"classes/Canceler.html":{},"interfaces/Options.html":{},"changelog.html":{},"index.html":{}}}],["ipcevent",{"_index":122,"title":{},"body":{"interfaces/IpcRendererEvent.html":{},"interfaces/Options.html":{},"miscellaneous/typealiases.html":{}}}],["ipcextensions",{"_index":370,"title":{},"body":{"index.html":{}}}],["ipcmain",{"_index":116,"title":{},"body":{"interfaces/IpcRendererEvent.html":{},"interfaces/Options.html":{},"miscellaneous/typealiases.html":{}}}],["ipcmainevent",{"_index":120,"title":{},"body":{"interfaces/IpcRendererEvent.html":{},"miscellaneous/typealiases.html":{}}}],["ipcrenderer",{"_index":108,"title":{},"body":{"interfaces/IpcRendererEvent.html":{},"interfaces/Options.html":{},"miscellaneous/typealiases.html":{}}}],["ipcrendererevent",{"_index":103,"title":{"interfaces/IpcRendererEvent.html":{}},"body":{"interfaces/IpcRendererEvent.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["ipcservice",{"_index":21,"title":{},"body":{"interfaces/Cancelable.html":{},"classes/Canceler.html":{},"interfaces/IpcRendererEvent.html":{},"interfaces/Options.html":{},"miscellaneous/typealiases.html":{}}}],["isrequestchannel",{"_index":73,"title":{},"body":{"classes/Channels.html":{},"interfaces/CommunicationChannels.html":{}}}],["isrequestchannel(channel",{"_index":90,"title":{},"body":{"classes/Channels.html":{}}}],["item",{"_index":172,"title":{},"body":{"interfaces/Options.html":{}}}],["keep",{"_index":285,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["kind",{"_index":472,"title":{},"body":{"license.html":{}}}],["later",{"_index":315,"title":{},"body":{"changelog.html":{}}}],["length",{"_index":167,"title":{},"body":{"interfaces/Options.html":{}}}],["liability",{"_index":487,"title":{},"body":{"license.html":{}}}],["liable",{"_index":484,"title":{},"body":{"license.html":{}}}],["library",{"_index":249,"title":{},"body":{"interfaces/Options.html":{},"index.html":{}}}],["license",{"_index":427,"title":{"license.html":{}},"body":{"index.html":{},"license.html":{}}}],["limitation",{"_index":450,"title":{},"body":{"license.html":{}}}],["limited",{"_index":475,"title":{},"body":{"license.html":{}}}],["listen",{"_index":233,"title":{},"body":{"interfaces/Options.html":{}}}],["listener",{"_index":26,"title":{},"body":{"interfaces/Cancelable.html":{},"classes/Canceler.html":{},"interfaces/Options.html":{}}}],["listeneroroptions",{"_index":258,"title":{},"body":{"interfaces/Options.html":{}}}],["listeners",{"_index":217,"title":{},"body":{"interfaces/Options.html":{},"index.html":{}}}],["listening",{"_index":107,"title":{},"body":{"interfaces/IpcRendererEvent.html":{},"interfaces/Options.html":{}}}],["listens",{"_index":229,"title":{},"body":{"interfaces/Options.html":{}}}],["longer",{"_index":46,"title":{},"body":{"interfaces/Cancelable.html":{},"classes/Canceler.html":{}}}],["made",{"_index":412,"title":{},"body":{"index.html":{}}}],["main",{"_index":115,"title":{},"body":{"interfaces/IpcRendererEvent.html":{},"index.html":{}}}],["making",{"_index":409,"title":{},"body":{"index.html":{}}}],["markdown",{"_index":299,"title":{},"body":{"changelog.html":{}}}],["matching",{"_index":53,"title":{},"body":{"interfaces/Cancelable.html":{},"classes/Canceler.html":{},"classes/Channels.html":{},"interfaces/CommunicationChannels.html":{},"interfaces/IpcRendererEvent.html":{},"interfaces/Options.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{}}}],["mategka",{"_index":434,"title":{},"body":{"license.html":{}}}],["meaning",{"_index":45,"title":{},"body":{"interfaces/Cancelable.html":{},"classes/Canceler.html":{}}}],["means",{"_index":356,"title":{},"body":{"index.html":{}}}],["merchantability",{"_index":477,"title":{},"body":{"license.html":{}}}],["merge",{"_index":453,"title":{},"body":{"license.html":{}}}],["message",{"_index":48,"title":{},"body":{"interfaces/Cancelable.html":{},"classes/Canceler.html":{},"interfaces/Options.html":{},"index.html":{}}}],["messages",{"_index":147,"title":{},"body":{"interfaces/Options.html":{},"index.html":{}}}],["method",{"_index":232,"title":{},"body":{"interfaces/Options.html":{}}}],["methods",{"_index":12,"title":{},"body":{"interfaces/Cancelable.html":{},"classes/Canceler.html":{},"classes/Channels.html":{},"index.html":{}}}],["mind",{"_index":388,"title":{},"body":{"index.html":{}}}],["miscellaneous",{"_index":500,"title":{"miscellaneous/typealiases.html":{}},"body":{"miscellaneous/typealiases.html":{}}}],["mit",{"_index":429,"title":{},"body":{"index.html":{},"license.html":{}}}],["modify",{"_index":452,"title":{},"body":{"license.html":{}}}],["modules",{"_index":496,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["more",{"_index":422,"title":{},"body":{"index.html":{}}}],["mywindow",{"_index":406,"title":{},"body":{"index.html":{}}}],["name",{"_index":60,"title":{},"body":{"classes/Canceler.html":{},"classes/Channels.html":{},"interfaces/CommunicationChannels.html":{}}}],["names",{"_index":68,"title":{},"body":{"classes/Channels.html":{},"interfaces/CommunicationChannels.html":{}}}],["native",{"_index":251,"title":{},"body":{"interfaces/Options.html":{},"index.html":{}}}],["natively",{"_index":257,"title":{},"body":{"interfaces/Options.html":{}}}],["need",{"_index":255,"title":{},"body":{"interfaces/Options.html":{},"index.html":{}}}],["new",{"_index":33,"title":{},"body":{"interfaces/Cancelable.html":{},"classes/Canceler.html":{},"interfaces/Options.html":{},"coverage.html":{},"index.html":{}}}],["noninfringement",{"_index":481,"title":{},"body":{"license.html":{}}}],["normalized",{"_index":355,"title":{},"body":{"index.html":{}}}],["notable",{"_index":279,"title":{},"body":{"changelog.html":{}}}],["note",{"_index":345,"title":{},"body":{"index.html":{}}}],["nothing",{"_index":272,"title":{},"body":{"interfaces/Options.html":{}}}],["notice",{"_index":465,"title":{},"body":{"license.html":{}}}],["now",{"_index":305,"title":{},"body":{"changelog.html":{}}}],["npm",{"_index":367,"title":{},"body":{"index.html":{}}}],["number",{"_index":110,"title":{},"body":{"interfaces/IpcRendererEvent.html":{}}}],["object",{"_index":259,"title":{},"body":{"interfaces/Options.html":{},"index.html":{}}}],["object.assign(agent.fallbackoptions",{"_index":207,"title":{},"body":{"interfaces/Options.html":{}}}],["object.assign(this.defaultoptions",{"_index":191,"title":{},"body":{"interfaces/Options.html":{}}}],["observable",{"_index":382,"title":{},"body":{"index.html":{}}}],["observables",{"_index":381,"title":{},"body":{"index.html":{}}}],["obtaining",{"_index":441,"title":{},"body":{"license.html":{}}}],["occurred",{"_index":211,"title":{},"body":{"interfaces/Options.html":{}}}],["omit",{"_index":271,"title":{},"body":{"interfaces/Options.html":{}}}],["on/once",{"_index":416,"title":{},"body":{"index.html":{}}}],["once",{"_index":245,"title":{},"body":{"interfaces/Options.html":{}}}],["oncelistener",{"_index":268,"title":{},"body":{"interfaces/Options.html":{}}}],["oncepromise",{"_index":265,"title":{},"body":{"interfaces/Options.html":{}}}],["one",{"_index":394,"title":{},"body":{"index.html":{}}}],["option",{"_index":421,"title":{},"body":{"index.html":{}}}],["optional",{"_index":62,"title":{},"body":{"classes/Canceler.html":{},"classes/Channels.html":{}}}],["options",{"_index":123,"title":{"interfaces/Options.html":{}},"body":{"interfaces/Options.html":{},"changelog.html":{},"coverage.html":{},"index.html":{}}}],["order",{"_index":377,"title":{},"body":{"index.html":{}}}],["origin",{"_index":79,"title":{},"body":{"classes/Channels.html":{},"interfaces/CommunicationChannels.html":{}}}],["origin/electron",{"_index":80,"title":{},"body":{"classes/Channels.html":{},"interfaces/CommunicationChannels.html":{}}}],["otherwise",{"_index":491,"title":{},"body":{"license.html":{}}}],["out",{"_index":493,"title":{},"body":{"license.html":{}}}],["output",{"_index":419,"title":{},"body":{"index.html":{}}}],["override",{"_index":184,"title":{},"body":{"interfaces/Options.html":{}}}],["overrides",{"_index":178,"title":{},"body":{"interfaces/Options.html":{}}}],["overview",{"_index":497,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":313,"title":{"dependencies.html":{}},"body":{"changelog.html":{},"index.html":{}}}],["pair",{"_index":76,"title":{},"body":{"classes/Channels.html":{},"interfaces/CommunicationChannels.html":{}}}],["param",{"_index":34,"title":{},"body":{"interfaces/Cancelable.html":{},"classes/Canceler.html":{},"classes/Channels.html":{},"interfaces/CommunicationChannels.html":{},"interfaces/Options.html":{}}}],["parameters",{"_index":59,"title":{},"body":{"classes/Canceler.html":{},"classes/Channels.html":{}}}],["params",{"_index":235,"title":{},"body":{"interfaces/Options.html":{}}}],["params.args",{"_index":239,"title":{},"body":{"interfaces/Options.html":{}}}],["partial",{"_index":159,"title":{},"body":{"interfaces/Options.html":{}}}],["particular",{"_index":479,"title":{},"body":{"license.html":{}}}],["pass",{"_index":197,"title":{},"body":{"interfaces/Options.html":{}}}],["passed",{"_index":137,"title":{},"body":{"interfaces/Options.html":{}}}],["permission",{"_index":435,"title":{},"body":{"license.html":{}}}],["permit",{"_index":460,"title":{},"body":{"license.html":{}}}],["person",{"_index":440,"title":{},"body":{"license.html":{}}}],["persons",{"_index":461,"title":{},"body":{"license.html":{}}}],["portions",{"_index":469,"title":{},"body":{"license.html":{}}}],["possible",{"_index":247,"title":{},"body":{"interfaces/Options.html":{}}}],["post",{"_index":213,"title":{},"body":{"interfaces/Options.html":{},"index.html":{}}}],["posted",{"_index":148,"title":{},"body":{"interfaces/Options.html":{}}}],["postfix",{"_index":385,"title":{},"body":{"index.html":{}}}],["posts",{"_index":219,"title":{},"body":{"interfaces/Options.html":{}}}],["present",{"_index":432,"title":{},"body":{"license.html":{}}}],["prints",{"_index":402,"title":{},"body":{"index.html":{}}}],["private",{"_index":41,"title":{},"body":{"interfaces/Cancelable.html":{},"classes/Canceler.html":{},"interfaces/Options.html":{}}}],["probably",{"_index":393,"title":{},"body":{"index.html":{}}}],["process",{"_index":9,"title":{},"body":{"interfaces/Cancelable.html":{},"classes/Canceler.html":{},"interfaces/IpcRendererEvent.html":{},"interfaces/Options.html":{},"index.html":{}}}],["production",{"_index":352,"title":{},"body":{"index.html":{}}}],["progress",{"_index":348,"title":{},"body":{"index.html":{}}}],["project",{"_index":281,"title":{},"body":{"changelog.html":{}}}],["projects",{"_index":349,"title":{},"body":{"index.html":{}}}],["prominent",{"_index":395,"title":{},"body":{"index.html":{}}}],["promise",{"_index":138,"title":{},"body":{"interfaces/Options.html":{},"dependencies.html":{},"index.html":{}}}],["promise((resolve",{"_index":224,"title":{},"body":{"interfaces/Options.html":{}}}],["promise/register/bluebird",{"_index":375,"title":{},"body":{"index.html":{}}}],["promise/register/bluebird';you",{"_index":376,"title":{},"body":{"index.html":{}}}],["promises",{"_index":218,"title":{},"body":{"interfaces/Options.html":{},"index.html":{}}}],["properties",{"_index":56,"title":{},"body":{"classes/Canceler.html":{},"interfaces/CommunicationChannels.html":{},"interfaces/IpcRendererEvent.html":{},"interfaces/Options.html":{}}}],["protected",{"_index":157,"title":{},"body":{"interfaces/Options.html":{}}}],["provided",{"_index":470,"title":{},"body":{"license.html":{}}}],["public",{"_index":42,"title":{},"body":{"interfaces/Cancelable.html":{},"classes/Canceler.html":{},"classes/Channels.html":{},"interfaces/CommunicationChannels.html":{},"interfaces/Options.html":{}}}],["publish",{"_index":454,"title":{},"body":{"license.html":{}}}],["purpose",{"_index":480,"title":{},"body":{"license.html":{}}}],["readme.md",{"_index":298,"title":{},"body":{"changelog.html":{}}}],["receive",{"_index":88,"title":{},"body":{"classes/Channels.html":{},"interfaces/CommunicationChannels.html":{},"index.html":{}}}],["received",{"_index":49,"title":{},"body":{"interfaces/Cancelable.html":{},"classes/Canceler.html":{},"interfaces/IpcRendererEvent.html":{},"interfaces/Options.html":{},"index.html":{}}}],["receiving",{"_index":264,"title":{},"body":{"interfaces/Options.html":{}}}],["refer",{"_index":417,"title":{},"body":{"index.html":{}}}],["register",{"_index":373,"title":{},"body":{"index.html":{}}}],["reject",{"_index":225,"title":{},"body":{"interfaces/Options.html":{}}}],["rejected",{"_index":208,"title":{},"body":{"interfaces/Options.html":{}}}],["removealllisteners",{"_index":270,"title":{},"body":{"interfaces/Options.html":{}}}],["removed",{"_index":310,"title":{},"body":{"changelog.html":{}}}],["renderer",{"_index":113,"title":{},"body":{"interfaces/IpcRendererEvent.html":{},"index.html":{}}}],["replace",{"_index":185,"title":{},"body":{"interfaces/Options.html":{}}}],["replies",{"_index":140,"title":{},"body":{"interfaces/Options.html":{}}}],["reply",{"_index":404,"title":{},"body":{"index.html":{}}}],["represents",{"_index":8,"title":{},"body":{"interfaces/Cancelable.html":{},"classes/Canceler.html":{},"classes/Channels.html":{},"interfaces/CommunicationChannels.html":{},"interfaces/IpcRendererEvent.html":{},"interfaces/Options.html":{}}}],["request",{"_index":94,"title":{},"body":{"classes/Channels.html":{},"interfaces/CommunicationChannels.html":{},"interfaces/Options.html":{}}}],["request/responseoptions",{"_index":215,"title":{},"body":{"interfaces/Options.html":{}}}],["requestchannel",{"_index":96,"title":{},"body":{"classes/Channels.html":{},"interfaces/CommunicationChannels.html":{},"interfaces/Options.html":{}}}],["requests",{"_index":85,"title":{},"body":{"classes/Channels.html":{},"interfaces/CommunicationChannels.html":{}}}],["require('any",{"_index":374,"title":{},"body":{"index.html":{}}}],["resolve",{"_index":413,"title":{},"body":{"index.html":{}}}],["resolve(response",{"_index":226,"title":{},"body":{"interfaces/Options.html":{}}}],["resolves",{"_index":220,"title":{},"body":{"interfaces/Options.html":{}}}],["respective",{"_index":420,"title":{},"body":{"index.html":{}}}],["respond",{"_index":164,"title":{},"body":{"interfaces/Options.html":{}}}],["respond(response",{"_index":242,"title":{},"body":{"interfaces/Options.html":{}}}],["responds",{"_index":163,"title":{},"body":{"interfaces/Options.html":{}}}],["response",{"_index":100,"title":{},"body":{"classes/Channels.html":{},"interfaces/CommunicationChannels.html":{},"interfaces/Options.html":{}}}],["response.then(respond",{"_index":241,"title":{},"body":{"interfaces/Options.html":{}}}],["responsechannel",{"_index":97,"title":{},"body":{"classes/Channels.html":{},"interfaces/CommunicationChannels.html":{},"interfaces/Options.html":{}}}],["responses",{"_index":89,"title":{},"body":{"classes/Channels.html":{},"interfaces/CommunicationChannels.html":{},"interfaces/Options.html":{},"index.html":{}}}],["restriction",{"_index":448,"title":{},"body":{"license.html":{}}}],["result",{"_index":52,"title":{},"body":{"interfaces/Cancelable.html":{},"classes/Canceler.html":{},"classes/Channels.html":{},"interfaces/CommunicationChannels.html":{},"interfaces/IpcRendererEvent.html":{},"interfaces/Options.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{}}}],["results",{"_index":54,"title":{},"body":{"interfaces/Cancelable.html":{},"classes/Canceler.html":{},"classes/Channels.html":{},"interfaces/CommunicationChannels.html":{},"interfaces/IpcRendererEvent.html":{},"interfaces/Options.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{}}}],["retain",{"_index":182,"title":{},"body":{"interfaces/Options.html":{}}}],["return",{"_index":98,"title":{},"body":{"classes/Channels.html":{},"interfaces/CommunicationChannels.html":{},"interfaces/Options.html":{},"index.html":{}}}],["returns",{"_index":17,"title":{},"body":{"interfaces/Cancelable.html":{},"classes/Canceler.html":{},"classes/Channels.html":{},"interfaces/CommunicationChannels.html":{},"interfaces/Options.html":{}}}],["rights",{"_index":451,"title":{},"body":{"license.html":{}}}],["rx",{"_index":383,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":311,"title":{},"body":{"changelog.html":{}}}],["same",{"_index":360,"title":{},"body":{"index.html":{}}}],["see",{"_index":418,"title":{},"body":{"index.html":{}}}],["sell",{"_index":458,"title":{},"body":{"license.html":{}}}],["semantic",{"_index":287,"title":{},"body":{"changelog.html":{}}}],["send",{"_index":84,"title":{},"body":{"classes/Channels.html":{},"interfaces/CommunicationChannels.html":{},"interfaces/Options.html":{}}}],["senderid",{"_index":109,"title":{},"body":{"interfaces/IpcRendererEvent.html":{}}}],["sending",{"_index":161,"title":{},"body":{"interfaces/Options.html":{}}}],["sends",{"_index":160,"title":{},"body":{"interfaces/Options.html":{}}}],["sent",{"_index":415,"title":{},"body":{"index.html":{}}}],["separately",{"_index":142,"title":{},"body":{"interfaces/Options.html":{}}}],["server",{"_index":331,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["server(mywindow.webcontents",{"_index":407,"title":{},"body":{"index.html":{}}}],["server.on('message",{"_index":408,"title":{},"body":{"index.html":{}}}],["service",{"_index":36,"title":{},"body":{"interfaces/Cancelable.html":{},"classes/Canceler.html":{},"classes/Channels.html":{},"interfaces/CommunicationChannels.html":{},"interfaces/Options.html":{}}}],["services",{"_index":304,"title":{},"body":{"changelog.html":{}}}],["set",{"_index":125,"title":{},"body":{"interfaces/Options.html":{}}}],["settings",{"_index":179,"title":{},"body":{"interfaces/Options.html":{}}}],["shall",{"_index":466,"title":{},"body":{"license.html":{}}}],["short",{"_index":425,"title":{},"body":{"index.html":{}}}],["simply",{"_index":230,"title":{},"body":{"interfaces/Options.html":{}}}],["single",{"_index":411,"title":{},"body":{"index.html":{}}}],["software",{"_index":443,"title":{},"body":{"license.html":{}}}],["something",{"_index":398,"title":{},"body":{"index.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/Cancelable.html":{},"classes/Canceler.html":{},"classes/Channels.html":{},"interfaces/CommunicationChannels.html":{},"interfaces/IpcRendererEvent.html":{},"interfaces/Options.html":{}}}],["specified",{"_index":181,"title":{},"body":{"interfaces/Options.html":{}}}],["specifying",{"_index":198,"title":{},"body":{"interfaces/Options.html":{}}}],["src/.../aliases.ts",{"_index":502,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/agent.ts",{"_index":124,"title":{},"body":{"interfaces/Options.html":{},"coverage.html":{}}}],["src/aliases.ts",{"_index":104,"title":{},"body":{"interfaces/IpcRendererEvent.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/canceler.ts",{"_index":6,"title":{},"body":{"interfaces/Cancelable.html":{},"classes/Canceler.html":{},"coverage.html":{}}}],["src/canceler.ts:10",{"_index":15,"title":{},"body":{"interfaces/Cancelable.html":{}}}],["src/canceler.ts:16",{"_index":58,"title":{},"body":{"classes/Canceler.html":{}}}],["src/canceler.ts:23",{"_index":63,"title":{},"body":{"classes/Canceler.html":{}}}],["src/canceler.ts:28",{"_index":64,"title":{},"body":{"classes/Canceler.html":{}}}],["src/channels.ts",{"_index":66,"title":{},"body":{"classes/Channels.html":{},"interfaces/CommunicationChannels.html":{},"coverage.html":{}}}],["src/channels.ts:23",{"_index":83,"title":{},"body":{"classes/Channels.html":{}}}],["src/channels.ts:31",{"_index":91,"title":{},"body":{"classes/Channels.html":{}}}],["src/channels.ts:39",{"_index":87,"title":{},"body":{"classes/Channels.html":{}}}],["src/channels.ts:47",{"_index":75,"title":{},"body":{"classes/Channels.html":{}}}],["src/client.ts",{"_index":327,"title":{},"body":{"coverage.html":{}}}],["src/server.ts",{"_index":330,"title":{},"body":{"coverage.html":{}}}],["standard",{"_index":309,"title":{},"body":{"changelog.html":{}}}],["started",{"_index":277,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{}}],["statements",{"_index":320,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":69,"title":{},"body":{"classes/Channels.html":{},"interfaces/CommunicationChannels.html":{},"interfaces/Options.html":{}}}],["still",{"_index":346,"title":{},"body":{"index.html":{}}}],["stop",{"_index":231,"title":{},"body":{"interfaces/Options.html":{}}}],["string",{"_index":43,"title":{},"body":{"interfaces/Cancelable.html":{},"classes/Canceler.html":{},"classes/Channels.html":{},"interfaces/CommunicationChannels.html":{},"interfaces/Options.html":{}}}],["style",{"_index":195,"title":{},"body":{"interfaces/Options.html":{},"changelog.html":{}}}],["subject",{"_index":463,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":456,"title":{},"body":{"license.html":{}}}],["substantial",{"_index":468,"title":{},"body":{"license.html":{}}}],["support",{"_index":144,"title":{},"body":{"interfaces/Options.html":{},"changelog.html":{},"index.html":{}}}],["supported",{"_index":254,"title":{},"body":{"interfaces/Options.html":{},"index.html":{}}}],["supporting",{"_index":371,"title":{},"body":{"index.html":{}}}],["switch",{"_index":200,"title":{},"body":{"interfaces/Options.html":{}}}],["switching",{"_index":391,"title":{},"body":{"index.html":{}}}],["symmetric",{"_index":340,"title":{},"body":{"index.html":{}}}],["t",{"_index":158,"title":{},"body":{"interfaces/Options.html":{}}}],["table",{"_index":333,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":332,"title":{},"body":{"coverage.html":{}}}],["terminates",{"_index":221,"title":{},"body":{"interfaces/Options.html":{}}}],["this').then(response",{"_index":400,"title":{},"body":{"index.html":{}}}],["this.defaultoptions",{"_index":190,"title":{},"body":{"interfaces/Options.html":{}}}],["this.getoptions(options",{"_index":236,"title":{},"body":{"interfaces/Options.html":{}}}],["this.getrequestchannel(origin",{"_index":101,"title":{},"body":{"classes/Channels.html":{},"interfaces/CommunicationChannels.html":{}}}],["this.getresponsechannel(origin",{"_index":102,"title":{},"body":{"classes/Channels.html":{},"interfaces/CommunicationChannels.html":{}}}],["this.handler",{"_index":51,"title":{},"body":{"interfaces/Cancelable.html":{},"classes/Canceler.html":{}}}],["this.ipcservice.on(requestchannel",{"_index":243,"title":{},"body":{"interfaces/Options.html":{}}}],["this.ipcservice.once(requestchannel",{"_index":267,"title":{},"body":{"interfaces/Options.html":{}}}],["this.ipcservice.once(responsechannel",{"_index":227,"title":{},"body":{"interfaces/Options.html":{}}}],["this.ipcservice.removealllisteners(channel",{"_index":275,"title":{},"body":{"interfaces/Options.html":{}}}],["this.ipcservice.removelistener(this.channel",{"_index":50,"title":{},"body":{"interfaces/Cancelable.html":{},"classes/Canceler.html":{}}}],["this.oncelistener(comchannels",{"_index":263,"title":{},"body":{"interfaces/Options.html":{}}}],["this.oncepromise(comchannels",{"_index":262,"title":{},"body":{"interfaces/Options.html":{}}}],["this.respond(event",{"_index":237,"title":{},"body":{"interfaces/Options.html":{}}}],["this.send(requestchannel",{"_index":228,"title":{},"body":{"interfaces/Options.html":{}}}],["through",{"_index":146,"title":{},"body":{"interfaces/Options.html":{}}}],["todo",{"_index":139,"title":{},"body":{"interfaces/Options.html":{}}}],["tort",{"_index":490,"title":{},"body":{"license.html":{}}}],["transformation",{"_index":134,"title":{},"body":{"interfaces/Options.html":{},"index.html":{}}}],["transformed",{"_index":193,"title":{},"body":{"interfaces/Options.html":{},"index.html":{}}}],["true",{"_index":186,"title":{},"body":{"interfaces/Options.html":{}}}],["turn",{"_index":216,"title":{},"body":{"interfaces/Options.html":{}}}],["type",{"_index":61,"title":{},"body":{"classes/Canceler.html":{},"classes/Channels.html":{},"interfaces/CommunicationChannels.html":{},"interfaces/IpcRendererEvent.html":{},"interfaces/Options.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["typealiases",{"_index":501,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":261,"title":{},"body":{"interfaces/Options.html":{}}}],["types/electron",{"_index":335,"title":{},"body":{"dependencies.html":{}}}],["uncaught",{"_index":209,"title":{},"body":{"interfaces/Options.html":{}}}],["undefined",{"_index":169,"title":{},"body":{"interfaces/Options.html":{}}}],["under",{"_index":428,"title":{},"body":{"index.html":{}}}],["unset",{"_index":187,"title":{},"body":{"interfaces/Options.html":{}}}],["unsubscribe",{"_index":25,"title":{},"body":{"interfaces/Cancelable.html":{},"classes/Canceler.html":{},"interfaces/Options.html":{}}}],["unsubscribes",{"_index":44,"title":{},"body":{"interfaces/Cancelable.html":{},"classes/Canceler.html":{},"interfaces/Options.html":{}}}],["unsubscribing",{"_index":38,"title":{},"body":{"interfaces/Cancelable.html":{},"classes/Canceler.html":{}}}],["usage",{"_index":392,"title":{},"body":{"index.html":{}}}],["use",{"_index":37,"title":{},"body":{"interfaces/Cancelable.html":{},"classes/Canceler.html":{},"interfaces/Options.html":{},"index.html":{},"license.html":{}}}],["used",{"_index":151,"title":{},"body":{"interfaces/Options.html":{},"index.html":{}}}],["useful",{"_index":296,"title":{},"body":{"changelog.html":{}}}],["using",{"_index":252,"title":{},"body":{"interfaces/Options.html":{}}}],["value",{"_index":166,"title":{},"body":{"interfaces/Options.html":{},"index.html":{}}}],["values",{"_index":128,"title":{},"body":{"interfaces/Options.html":{}}}],["versioning",{"_index":288,"title":{},"body":{"changelog.html":{}}}],["view",{"_index":114,"title":{},"body":{"interfaces/IpcRendererEvent.html":{}}}],["void",{"_index":19,"title":{},"body":{"interfaces/Cancelable.html":{},"classes/Canceler.html":{},"interfaces/Options.html":{}}}],["want",{"_index":183,"title":{},"body":{"interfaces/Options.html":{},"index.html":{}}}],["warranties",{"_index":476,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":471,"title":{},"body":{"license.html":{}}}],["webcontents",{"_index":111,"title":{},"body":{"interfaces/IpcRendererEvent.html":{},"miscellaneous/typealiases.html":{}}}],["whether",{"_index":92,"title":{},"body":{"classes/Channels.html":{},"interfaces/CommunicationChannels.html":{},"license.html":{}}}],["without",{"_index":447,"title":{},"body":{"license.html":{}}}],["work",{"_index":347,"title":{},"body":{"index.html":{}}}],["wrapper",{"_index":341,"title":{},"body":{"index.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/Cancelable.html":{"url":"interfaces/Cancelable.html","title":"interface - Cancelable","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Cancelable\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/canceler.ts\n        \n\n            \n                Description\n            \n            \n                Represents a process that can be aborted.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    cancel\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            cancel\n                            \n                            \n                        \n                    \n                \n                \n                    \ncancel()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/canceler.ts:10\n                            \n                        \n\n\n                \n                    \n                            Cancels the process.\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n\n    \n\n\n    \n        import { IpcService } from './aliases'\n\n/**\n * Represents a process that can be aborted.\n */\nexport interface Cancelable {\n  /**\n   * Cancels the process.\n   */\n  cancel (): void\n}\n\n/**\n * Represents a helper to unsubscribe a listener function from a channel.\n */\nexport class Canceler implements Cancelable {\n  /**\n   * Initializes a new Canceler.\n   * @param ipcService The IPC service to use for unsubscribing\n   * @param channel The channel to unsubscribe from\n   * @param handler The listener to unsubscribe\n   */\n  constructor (private ipcService: IpcService, public channel: string, private handler: Function) {}\n\n  /**\n   * Unsubscribes the listener, meaning it will no longer be called when a message is received.\n   */\n  public cancel (): void {\n    this.ipcService.removeListener(this.channel, this.handler)\n  }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Canceler.html":{"url":"classes/Canceler.html","title":"class - Canceler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Canceler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/canceler.ts\n        \n\n            \n                Description\n            \n            \n                Represents a helper to unsubscribe a listener function from a channel.\n\n            \n\n\n            \n                Implements\n            \n            \n                        Cancelable\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                channel\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                cancel\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(ipcService: IpcService, channel: string, handler: Function)\n                    \n                \n                        \n                            \n                                Defined in src/canceler.ts:16\n                            \n                        \n\n                \n                    \n                            Initializes a new Canceler.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        ipcService\n                                                  \n                                                        \n                                                                    IpcService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The IPC service to use for unsubscribing\n\n                                                        \n                                                \n                                                \n                                                        channel\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The channel to unsubscribe from\n\n                                                        \n                                                \n                                                \n                                                        handler\n                                                  \n                                                        \n                                                                    Function\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The listener to unsubscribe\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            channel\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/canceler.ts:23\n                            \n                        \n\n                \n                    \n                        The channel to unsubscribe from\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            cancel\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        cancel()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/canceler.ts:28\n                            \n                        \n\n\n                \n                    \n                            Unsubscribes the listener, meaning it will no longer be called when a message is received.\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { IpcService } from './aliases'\n\n/**\n * Represents a process that can be aborted.\n */\nexport interface Cancelable {\n  /**\n   * Cancels the process.\n   */\n  cancel (): void\n}\n\n/**\n * Represents a helper to unsubscribe a listener function from a channel.\n */\nexport class Canceler implements Cancelable {\n  /**\n   * Initializes a new Canceler.\n   * @param ipcService The IPC service to use for unsubscribing\n   * @param channel The channel to unsubscribe from\n   * @param handler The listener to unsubscribe\n   */\n  constructor (private ipcService: IpcService, public channel: string, private handler: Function) {}\n\n  /**\n   * Unsubscribes the listener, meaning it will no longer be called when a message is received.\n   */\n  public cancel (): void {\n    this.ipcService.removeListener(this.channel, this.handler)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Channels.html":{"url":"classes/Channels.html","title":"class - Channels","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Channels\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/channels.ts\n        \n\n            \n                Description\n            \n            \n                Represents a service for generating channel names.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                getCommunicationChannels\n                            \n                            \n                                    Static\n                                getRequestChannel\n                            \n                            \n                                    Static\n                                getResponseChannel\n                            \n                            \n                                    Static\n                                isRequestChannel\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            getCommunicationChannels\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getCommunicationChannels(origin: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/channels.ts:47\n                            \n                        \n\n\n                \n                    \n                            Returns a pair of communication channels for the given origin.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        origin\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                The origin/Electron channel name\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     CommunicationChannels\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            getRequestChannel\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getRequestChannel(origin: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/channels.ts:23\n                            \n                        \n\n\n                \n                    \n                            Returns the channel to send requests to for the given origin.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        origin\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                The origin/Electron channel name\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     string\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            getResponseChannel\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getResponseChannel(origin: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/channels.ts:39\n                            \n                        \n\n\n                \n                    \n                            Returns the channel to receive responses from for the given origin.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        origin\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                The origin/Electron channel name\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     string\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            isRequestChannel\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        isRequestChannel(channel: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/channels.ts:31\n                            \n                        \n\n\n                \n                    \n                            Returns whether the given channel name belongs to a request channel.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        channel\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     boolean\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        export interface CommunicationChannels {\n  /**\n   * The channel to send requests to.\n   */\n  requestChannel: string\n  /**\n   * The channel to receive responses from.\n   */\n  responseChannel: string\n}\n\n/**\n * Represents a service for generating channel names.\n */\nexport class Channels {\n  /**\n   * Returns the channel to send requests to for the given origin.\n   * @param origin The origin/Electron channel name\n   */\n  public static getRequestChannel (origin: string): string {\n    return `${origin}-request`\n  }\n\n  /**\n   * Returns whether the given channel name belongs to a request channel.\n   * @param channel\n   */\n  public static isRequestChannel (channel: string): boolean {\n    return channel.endsWith('-request')\n  }\n\n  /**\n   * Returns the channel to receive responses from for the given origin.\n   * @param origin The origin/Electron channel name\n   */\n  public static getResponseChannel (origin: string): string {\n    return `${origin}-response`\n  }\n\n  /**\n   * Returns a pair of communication channels for the given origin.\n   * @param origin The origin/Electron channel name\n   */\n  public static getCommunicationChannels (origin: string): CommunicationChannels {\n    return {\n      requestChannel: this.getRequestChannel(origin),\n      responseChannel: this.getResponseChannel(origin)\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CommunicationChannels.html":{"url":"interfaces/CommunicationChannels.html","title":"interface - CommunicationChannels","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  CommunicationChannels\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/channels.ts\n        \n\n            \n                Description\n            \n            \n                Represents a pair of communication channels for requests and responses.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        requestChannel\n                                \n                                \n                                        responseChannel\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        requestChannel\n                                    \n                                \n                                \n                                    \n                                        requestChannel:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The channel to send requests to.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        responseChannel\n                                    \n                                \n                                \n                                    \n                                        responseChannel:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The channel to receive responses from.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface CommunicationChannels {\n  /**\n   * The channel to send requests to.\n   */\n  requestChannel: string\n  /**\n   * The channel to receive responses from.\n   */\n  responseChannel: string\n}\n\n/**\n * Represents a service for generating channel names.\n */\nexport class Channels {\n  /**\n   * Returns the channel to send requests to for the given origin.\n   * @param origin The origin/Electron channel name\n   */\n  public static getRequestChannel (origin: string): string {\n    return `${origin}-request`\n  }\n\n  /**\n   * Returns whether the given channel name belongs to a request channel.\n   * @param channel\n   */\n  public static isRequestChannel (channel: string): boolean {\n    return channel.endsWith('-request')\n  }\n\n  /**\n   * Returns the channel to receive responses from for the given origin.\n   * @param origin The origin/Electron channel name\n   */\n  public static getResponseChannel (origin: string): string {\n    return `${origin}-response`\n  }\n\n  /**\n   * Returns a pair of communication channels for the given origin.\n   * @param origin The origin/Electron channel name\n   */\n  public static getCommunicationChannels (origin: string): CommunicationChannels {\n    return {\n      requestChannel: this.getRequestChannel(origin),\n      responseChannel: this.getResponseChannel(origin)\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IpcRendererEvent.html":{"url":"interfaces/IpcRendererEvent.html","title":"interface - IpcRendererEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IpcRendererEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/aliases.ts\n        \n\n            \n                Description\n            \n            \n                Represents an Electron event as received when listening with ipcRenderer.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        senderId\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        senderId\n                                    \n                                \n                                \n                                    \n                                        senderId:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The Electron WebContents ID of the renderer view in the main process.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export type IpcMain = Electron.IpcMain\nexport type IpcRenderer = Electron.IpcRenderer\nexport type WebContents = Electron.WebContents\n\nexport type IpcMainEvent = Electron.Event\n\n/**\n * Represents an Electron event as received when listening with ipcRenderer.\n */\nexport interface IpcRendererEvent {\n  /**\n   * The Electron WebContents ID of the renderer view in the main process.\n   */\n  senderId: number\n}\n\nexport type IpcService = IpcMain | IpcRenderer\nexport type IpcEvent = IpcMainEvent | IpcRendererEvent\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Options.html":{"url":"interfaces/Options.html","title":"interface - Options","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Options\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/agent.ts\n        \n\n            \n                Description\n            \n            \n                Represents a set of options for handling listener arguments and return values.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        args\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        args\n                                    \n                                \n                                \n                                    \n                                        args:     \"atomize\" | \"array\" | \"as-is\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"atomize\" | \"array\" | \"as-is\"\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Determines how argument transformation is handled when being passed to a listener or Promise.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import Promise from 'any-promise'\nimport { Channels, CommunicationChannels } from './channels'\nimport { IpcEvent, IpcService } from './aliases'\nimport { Canceler } from './canceler'\n\n/**\n * Represents a set of options for handling listener arguments and return values.\n */\nexport interface Options {\n  /**\n   * Determines how argument transformation is handled when being passed to a listener or Promise.\n   */\n  args: 'atomize' | 'array' | 'as-is'\n}\n\n// TODO: Replies\n// TODO: De/serialize values separately (with Date support)\n/**\n * Represents an IPC communicator through which messages can be posted and received.\n */\nexport abstract class Agent {\n  /**\n   * The set of options used by all instances by default.\n   */\n  private static fallbackOptions: Options = {\n    args: 'atomize'\n  }\n\n  /**\n   * Initializes a new Agent for the given Electron IPC service.\n   * @param ipcService Either the ipcMain or the ipcRenderer service from Electron\n   * @param defaultOptions A set of options to use by default for all message handlers\n   */\n  protected constructor (protected ipcService: T, private defaultOptions: Partial = {}) {}\n\n  /**\n   * Sends a message to the other service.\n   * @param requestChannel The channel to use for sending the request\n   * @param data The request data\n   */\n  protected abstract send (requestChannel: string, ...data: any[]): void\n\n  /**\n   * Responds to a given event from the other process.\n   * @param event The event to respond to\n   * @param responseChannel The channel to use for sending the response\n   * @param data The response data\n   */\n  protected abstract respond (event: IpcEvent, responseChannel: string, ...data: any[]): void\n\n  /**\n   * Returns an atomized value for the given array.\n   * If the array has length 0, the return value will be undefined.\n   * If the array has length 1, the return value will be the first and only array item.\n   * If the array has a length of 2 or above, the return value will be the input array.\n   * @param args The arguments to atomize\n   */\n  protected static atomize (args: T[]): T | T[] {\n    return args.length > 1 ? args : args[0]\n  }\n\n  /**\n   * Overrides the default settings of this IPC communicator instance.\n   * Settings not specified in the options argument will retain their values by default.\n   * @param options A set of options with settings you want to override\n   * @param replace If true, settings not specified in the options argument will be unset\n   */\n  public configure (options: Partial, replace: boolean = false): void {\n    if (replace) {\n      this.defaultOptions = options\n      return\n    }\n    Object.assign(this.defaultOptions, options)\n  }\n\n  /**\n   * Calls the given handler with the given arguments transformed according to the given style.\n   * @param handler The function to call\n   * @param args The arguments to pass\n   * @param style A string specifying how to pass the arguments\n   */\n  protected static applyWithStyle (handler: Function, args: any[], style: 'atomize' | 'array' | 'as-is'): any {\n    switch (style) {\n      default:\n      case 'atomize':\n        return handler(Agent.atomize(args))\n      case 'array':\n        return handler(args)\n      case 'as-is':\n        return handler(...args)\n    }\n  }\n\n  /**\n   * Returns a set of options according to this instance's default options and the given overrides.\n   * @param overrides A set of options with settings that should override default values\n   */\n  protected getOptions (overrides?: Partial): Options {\n    return Object.assign(Agent.fallbackOptions, this.defaultOptions, overrides)\n  }\n\n  // TODO: The Promise should be rejected if an uncaught error occurred at the listening endpoint.\n  // TODO: post with listener\n  // TODO: Change Options to Request/ResponseOptions and let it turn off atomize for listeners AND Promises\n  /**\n   * Posts a message to the given channel.\n   * The Promise resolves either when a response is received or when the listening endpoint terminates.\n   * @param channel The channel to post to\n   * @param data The message to post\n   */\n  public post (channel: string, ...data: any[]): Promise {\n    const { requestChannel, responseChannel } = Channels.getCommunicationChannels(channel)\n    const response = new Promise((resolve, reject) => {\n      const handler = (event: IpcEvent, response: any) => {\n        resolve(response)\n      }\n      this.ipcService.once(responseChannel, handler)\n    })\n    this.send(requestChannel, ...data)\n    return response\n  }\n\n  /**\n   * Listens for messages on the given channel and calls the given listener when a message is received.\n   * To send a response, simply have the listener function return a value or a Promise.\n   * To stop listening, just call cancel() on the return value of this method.\n   * @param channel The channel to listen to\n   * @param listener The listener to call for each received message\n   * @param options A set of options to override the default options for this call only\n   */\n  public on (channel: string, listener: Function, options?: Partial): Canceler {\n    const { requestChannel, responseChannel } = Channels.getCommunicationChannels(channel)\n    const params = this.getOptions(options)\n    const handler = (event: IpcEvent, ...args: any[]) => {\n      const respond = (response: any) => this.respond(event, responseChannel, response)\n      const response: any = Agent.applyWithStyle(listener, args, params.args)\n      if (response instanceof Promise) {\n        response.then(respond)\n      } else {\n        respond(response)\n      }\n    }\n    this.ipcService.on(requestChannel, handler)\n    return new Canceler(this.ipcService, requestChannel, handler)\n  }\n\n  /**\n   * Listens for a message on the given channel. The Promise resolves once a message was received.\n   * Canceling is only possible through the use of an additional library like Bluebird, not with native Promises.\n   * Responses using Promises are currently not supported. If you need to respond, use a listener instead.\n   * @param channel The channel to listen to\n   * @param options A set of options to override the default options for this call only\n   */\n  public once (channel: string, options?: Partial): Promise\n  /**\n   * Listens for a message on the given channel and calls the given listener when it is received.\n   * To send a response, simply have the listener function return a value or a Promise.\n   * To stop listening, just call cancel() on the return value of this method.\n   * @param channel The channel to listen to\n   * @param listener The listener to call once the message was received\n   * @param options A set of options to override the default options for this call only\n   */\n  public once (channel: string, listener: Function, options?: Partial): Canceler\n  /**\n   * Listens for a message on the given channel and calls the given listener when it is received.\n   * If no listener is specified, this method returns a Promise that resolves once the message is received instead.\n   * To send a response, simply have the listener function return a value or a Promise.\n   * To stop listening, just call cancel() on the return value of this method.\n   * Canceling a Promise is only possible through the use of an additional library like Bluebird, not natively.\n   * Responses using Promises are currently not supported. If you need to respond, use a listener instead.\n   * @param channel The channel to listen to\n   * @param listenerOrOptions The listener to call once the message was received or an Options object\n   * @param options A set of options to override the default options for this call only\n   */\n  public once (channel: string, listenerOrOptions?: Function | Partial, options?: Partial) {\n    const comChannels = Channels.getCommunicationChannels(channel)\n    if (typeof listenerOrOptions !== 'function') {\n      return this.oncePromise(comChannels, listenerOrOptions)\n    } else {\n      return this.onceListener(comChannels, listenerOrOptions, options)\n    }\n  }\n\n  /**\n   * Listens for a message. The Promise resolves once a message was received.\n   * @param comChannels The communication channels to use for sending and receiving messages\n   * @param options A set of options to override the default options for this call only\n   */\n  private oncePromise (comChannels: CommunicationChannels, options?: Partial): Promise {\n    const { requestChannel, responseChannel } = comChannels\n    const params = this.getOptions(options)\n    return new Promise((resolve, reject) => {\n      const handler = (event: IpcEvent, ...args: any[]) => {\n        Agent.applyWithStyle(resolve, args, params.args)\n        const response: any = undefined\n        this.respond(event, responseChannel, response)\n      }\n      this.ipcService.once(requestChannel, handler)\n    })\n  }\n\n  /**\n   * Listens for a message and calls the given listener when it is received.\n   * @param comChannels The communication channels to use for sending and receiving messages\n   * @param listener The listener to call once the message was received\n   * @param options A set of options to override the default options for this call only\n   */\n  private onceListener (comChannels: CommunicationChannels, listener: Function, options?: Partial): Canceler {\n    const { requestChannel, responseChannel } = comChannels\n    const params = this.getOptions(options)\n    const handler = (event: IpcEvent, ...args: any[]) => {\n      const respond = (response: any) => this.respond(event, responseChannel, response)\n      const response: any = Agent.applyWithStyle(listener, args, params.args)\n      if (response instanceof Promise) {\n        response.then(respond)\n      } else {\n        respond(response)\n      }\n    }\n    this.ipcService.once(requestChannel, handler)\n    return new Canceler(this.ipcService, requestChannel, handler)\n  }\n\n  // TODO: Request Promises should be canceled/rejected when removeAllListeners() is called.\n  /**\n   * Unsubscribes all listeners from all channels.\n   */\n  public removeAllListeners (): void\n  /**\n   * Unsubscribes all listeners from the given channel. Omit the channel to unsubscribe from all channels.\n   * @param channel The channel to unsubscribe from (or nothing)\n   */\n  public removeAllListeners (channel?: string): void {\n    const channels = []\n    if (typeof channel !== 'undefined') {\n      channels.push(Channels.getRequestChannel(channel))\n    } else {\n      channels.push(...this.ipcService.eventNames().filter(Channels.isRequestChannel))\n    }\n    for (let channel of channels) {\n      this.ipcService.removeAllListeners(channel)\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\nChangelog\nAll notable changes to this project will be documented in this file.\nThe format is based on Keep a Changelog,\nand this project adheres to Semantic Versioning.\n0.2.0 - 2019-02-15\nAdded\n\nCode documentation\nUseful information in README.md\nAdditional markdown help\nOptions / argument behavior adjustment support\n\nChanged\n\nElectron IPC services are now dynamically imported\nAdherence to Standard code style\n\nRemoved\n\nRxJS support (extension package available at a later date)\n\nFixed\n\nPackage exports\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/agent.ts\n            \n            class\n            Agent\n            \n                100 %\n                (18/18)\n            \n        \n        \n            \n                \n                src/agent.ts\n            \n            interface\n            Options\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/aliases.ts\n            \n            interface\n            IpcRendererEvent\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/canceler.ts\n            \n            class\n            Canceler\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/canceler.ts\n            \n            interface\n            Cancelable\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/channels.ts\n            \n            class\n            Channels\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/channels.ts\n            \n            interface\n            CommunicationChannels\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/client.ts\n            \n            class\n            Client\n            \n                100 %\n                (20/20)\n            \n        \n        \n            \n                \n                src/server.ts\n            \n            class\n            Server\n            \n                100 %\n                (20/20)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @types/electron : ^1.6.10\n        \n            any-promise : ^1.3.0\n        \n            electron : ^4.0.4\n    \n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nelectron-ipc\n\n\n\n\nAn easy-to-use symmetric wrapper around Electron's IPC API\nNote:\nThis package is still a work in progress and should not be used in any\nprojects yet, let alone any applications in production.\nFeatures\nThis package allows you to use a normalized, symmetric API for IPC.\nThis means that both the client and server APIs can be used as if they were\nexactly the same.\nThe following means of asynchronous communication are currently supported:\n\nlisteners / callbacks\nnative Promises (ES2015+)\ncustom Promises (like bluebird)\n\nInstallation\n$ npm install @axaptional/electron-ipcExtensions\nCancelable Promises\nIf you want to use cancelable Promises, install a Promise library like\nbluebird supporting this feature,\nthen register your Promise constructor with\nany-promise like this:\nrequire('any-promise/register/bluebird');\n// or\nimport 'any-promise/register/bluebird';You will need to register your custom Promise constructor in both the main and\nthe renderer process in order to use canceling in both.\nany-promise is automatically installed since it is a dependency of this\npackage.\nObservables\nThe extension package for Observable support is not available yet.\nIf you want to use Observables, install\n@axaptional/electron-ipc-rx.\nThis package will add $-postfix counterparts to most methods,\ne.g. post$(...).\nKeep in mind that you will need to adjust your imports when switching from\nelectron-ipc.\nUsage\nPost messages and receive responses\nProbably one of the most prominent use cases is that you want to initiate a\nmain process function from the renderer process and do something with the\nresult of that function in the renderer process.\nRenderer Process\nimport { Client } from '@axaptional/electron-ipc';\n\nconst client = new Client();\n\nclient.post('message', 'this').then(response => {\n  console.log(response); // Prints \"And here is the reply to this\"\n});Main Process\nimport { BrowserWindow } from 'electron';\nimport { Server } from '@axaptional/electron-ipc';\n\nconst myWindow = new BrowserWindow();\n// ...\n\nconst server = new Server(myWindow.webContents);\n\nserver.on('message', message => {\n  return `And here is the reply to ${message}`;\n});Argument behavior\nBy default, arguments will be atomized, making them fit into a single object.\nThis transformation is made because Promises can only resolve to one value.\nThis behavior applies to messages sent with post and received by on/once.\nRefer to the following table to see which input arguments are transformed to\nwhich output arguments with the respective args option.\nKeep in mind that { args: 'as-is' } is only available for listeners.\n\n\n\nOptions\n()\n(1)\n(1, 2)\n([1])\n([1, 2])\n([1], 2)\n\n\n\n\n{}\n()\n(1)\n([1, 2])\n([1])\n([1, 2])\n([[1], 2])\n\n\n{ args: 'array' }\n([])\n([1])\n([1, 2])\n([[1]])\n([[1, 2]])\n([[1], 2])\n\n\n{ args: 'as-is' }\n()\n(1)\n(1, 2)\n([1])\n([1, 2])\n([1], 2)\n\n\n\nFor more detailed information,\nsee Argument behavior in detail.\nMethods\nFor short explanations on available methods,\nsee Methods.\nFor the code documentation,\nsee Documentation.\nLicense\nThis package is available under the MIT license.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2019-present André Mategka\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    5 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    4 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            IpcEvent   (src/.../aliases.ts)\n                        \n                        \n                            IpcMain   (src/.../aliases.ts)\n                        \n                        \n                            IpcMainEvent   (src/.../aliases.ts)\n                        \n                        \n                            IpcRenderer   (src/.../aliases.ts)\n                        \n                        \n                            IpcService   (src/.../aliases.ts)\n                        \n                        \n                            WebContents   (src/.../aliases.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/aliases.ts\n    \n    \n        \n            \n                \n                    \n                    IpcEvent\n                \n            \n            \n                \n                        IpcMainEvent | IpcRendererEvent\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    IpcMain\n                \n            \n            \n                \n                        Electron.IpcMain\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    IpcMainEvent\n                \n            \n            \n                \n                        Electron.Event\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    IpcRenderer\n                \n            \n            \n                \n                        Electron.IpcRenderer\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    IpcService\n                \n            \n            \n                \n                        IpcMain | IpcRenderer\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    WebContents\n                \n            \n            \n                \n                        Electron.WebContents\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
